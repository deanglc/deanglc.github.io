<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Imp1mp</title>
    <link>https://blog.glc.im/tags/golang/</link>
    <description>Recent content in golang on Imp1mp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 21 Jun 2020 11:00:53 +0800</lastBuildDate>
    
	<atom:link href="https://blog.glc.im/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2016.md</title>
      <link>https://blog.glc.im/posts/2016/</link>
      <pubDate>Sun, 21 Jun 2020 11:00:53 +0800</pubDate>
      
      <guid>https://blog.glc.im/posts/2016/</guid>
      <description>Golang goroutine 和 kernel thread 之间是什么关系？ goroutine 是怎么调度的？ 看一下这段代码有没有问题(一段 golang for-range 里 goroutine 闭包捕获的代码)，为什么? 循环中的i只有一个地址 golang 的 gc 算法,</description>
    </item>
    
    <item>
      <title>go-redis.md</title>
      <link>https://blog.glc.im/posts/go-redis%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sun, 21 Jun 2020 11:00:53 +0800</pubDate>
      
      <guid>https://blog.glc.im/posts/go-redis%E7%9B%B8%E5%85%B3/</guid>
      <description>https://gopher.cc/go-redis-%E8%BF%9E%E6%8E%A5%E6%B1%A0-529.html // 定义redis链接池 var client *redis.Client // 初始化redis链接池 func init() { db, err := beego.AppConfig.Int(&amp;#34;redisDB&amp;#34;) if err != nil { logs.Error(&amp;#34;redis-db&amp;#34;, err) } client = redis.NewClient(&amp;amp;redis.Options{ Addr: beego.AppConfig.String(&amp;#34;redisAddr&amp;#34;), // Redis地址 Password: beego.AppConfig.String(&amp;#34;redisPassword&amp;#34;), // Redis账号 DB: db, // Re</description>
    </item>
    
    <item>
      <title>MPG.md</title>
      <link>https://blog.glc.im/posts/mpg%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sun, 21 Jun 2020 11:00:53 +0800</pubDate>
      
      <guid>https://blog.glc.im/posts/mpg%E7%9B%B8%E5%85%B3/</guid>
      <description>MPG 链接：https://www.zhihu.com/question/20862617/answer/36191625 要理解这个事儿首先得了</description>
    </item>
    
    <item>
      <title>渣翻Go runtime里的HACKING.md</title>
      <link>https://blog.glc.im/posts/hacking/</link>
      <pubDate>Thu, 21 Mar 2019 11:00:53 +0000</pubDate>
      
      <guid>https://blog.glc.im/posts/hacking/</guid>
      <description>源文件 https://github.com/golang/go/blob/master/src/runtime/HACKING.md Go1.11 This is a living document and at times it will be out of date. It is intended to articulate how programming in the Go runtime differs from writing normal Go. It focuses on pervasive concepts rather than details of particular interfaces. 这个文档的内容具有时效性(因为go的更新频繁)。</description>
    </item>
    
    <item>
      <title>Docker镜像瘦身&amp;Go mod初体验</title>
      <link>https://blog.glc.im/posts/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E6%9B%B4%E5%B0%8F%E6%9B%B4%E5%BF%AB%E7%9A%84go-docker%E9%95%9C%E5%83%8F/</link>
      <pubDate>Tue, 19 Mar 2019 11:00:53 +0000</pubDate>
      
      <guid>https://blog.glc.im/posts/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E6%9B%B4%E5%B0%8F%E6%9B%B4%E5%BF%AB%E7%9A%84go-docker%E9%95%9C%E5%83%8F/</guid>
      <description>##Docker镜像瘦身&amp;amp;Go mod初体验 ​ go1.11版本正式上线了 go module,研究了一哈,此次示例用上. Useage: go mod &amp;lt;command&amp;gt; [arguments] The commands are: download download</description>
    </item>
    
  </channel>
</rss>