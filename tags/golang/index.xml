<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Imp1mp</title>
    <link>https://blog.glc.im/tags/golang/</link>
    <description>Recent content in golang on Imp1mp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 21 Jun 2020 11:00:53 +0800</lastBuildDate>
    
	<atom:link href="https://blog.glc.im/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2016.md</title>
      <link>https://blog.glc.im/posts/2016/</link>
      <pubDate>Sun, 21 Jun 2020 11:00:53 +0800</pubDate>
      
      <guid>https://blog.glc.im/posts/2016/</guid>
      <description>Golang goroutine 和 kernel thread 之间是什么关系？ goroutine 是怎么调度的？ 看一下这段代码有没有问题(一段 golang for-range 里 goroutine 闭包捕获的代码)，为什么? 循环中的i只有一个地址 golang 的 gc 算法,</description>
    </item>
    
    <item>
      <title>go-redis.md</title>
      <link>https://blog.glc.im/posts/go-redis%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sun, 21 Jun 2020 11:00:53 +0800</pubDate>
      
      <guid>https://blog.glc.im/posts/go-redis%E7%9B%B8%E5%85%B3/</guid>
      <description>https://gopher.cc/go-redis-%E8%BF%9E%E6%8E%A5%E6%B1%A0-529.html // 定义redis链接池 var client *redis.Client // 初始化redis链接池 func init() { db, err := beego.AppConfig.Int(&amp;#34;redisDB&amp;#34;) if err != nil { logs.Error(&amp;#34;redis-db&amp;#34;, err) } client = redis.NewClient(&amp;amp;redis.Options{ Addr: beego.AppConfig.String(&amp;#34;redisAddr&amp;#34;), // Redis地址 Password: beego.AppConfig.String(&amp;#34;redisPassword&amp;#34;), // Redis账号 DB: db, // Re</description>
    </item>
    
    <item>
      <title>HACKING.md</title>
      <link>https://blog.glc.im/posts/hacking/</link>
      <pubDate>Sun, 21 Jun 2020 11:00:53 +0800</pubDate>
      
      <guid>https://blog.glc.im/posts/hacking/</guid>
      <description>https://github.com/golang/go/blob/master/src/runtime/HACKING.md 待翻译 This is a living document and at times it will be out of date. It is intended to articulate how programming in the Go runtime differs from writing normal Go. It focuses on pervasive concepts rather than details of particular interfaces. Scheduler structures The scheduler manages three types of resources that pervade the runtime: Gs, Ms, and Ps. It&amp;rsquo;s important to understand these even if you&amp;rsquo;re</description>
    </item>
    
    <item>
      <title>MPG.md</title>
      <link>https://blog.glc.im/posts/mpg%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sun, 21 Jun 2020 11:00:53 +0800</pubDate>
      
      <guid>https://blog.glc.im/posts/mpg%E7%9B%B8%E5%85%B3/</guid>
      <description>MPG 链接：https://www.zhihu.com/question/20862617/answer/36191625 要理解这个事儿首先得了</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://blog.glc.im/posts/backup/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.glc.im/posts/backup/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://blog.glc.im/posts/backup/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.glc.im/posts/backup/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
  </channel>
</rss>