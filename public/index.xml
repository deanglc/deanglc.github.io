<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Imp1mp</title>
    <link>https://blog.glc.im/</link>
    <description>Recent content on Imp1mp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 21 Jun 2020 11:00:53 +0800</lastBuildDate>
    
	<atom:link href="https://blog.glc.im/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用acme申请https免费证书</title>
      <link>https://blog.glc.im/posts/%E4%BD%BF%E7%94%A8acme%E7%94%B3%E8%AF%B7https%E8%AF%81%E4%B9%A6/</link>
      <pubDate>Thu, 20 Dec 2018 21:38:52 +0800</pubDate>
      
      <guid>https://blog.glc.im/posts/%E4%BD%BF%E7%94%A8acme%E7%94%B3%E8%AF%B7https%E8%AF%81%E4%B9%A6/</guid>
      <description>前言 ​ 上次写了一篇https证书相关的笔记整理,个人觉得有些地方欠妥,这次介绍一个更方便更简单更🐂一点的工具——acme.sh.上次使用的工</description>
    </item>
    
    <item>
      <title>2016.md</title>
      <link>https://blog.glc.im/posts/2016/</link>
      <pubDate>Sun, 21 Jun 2020 11:00:53 +0800</pubDate>
      
      <guid>https://blog.glc.im/posts/2016/</guid>
      <description>Golang goroutine 和 kernel thread 之间是什么关系？ goroutine 是怎么调度的？ 看一下这段代码有没有问题(一段 golang for-range 里 goroutine 闭包捕获的代码)，为什么? 循环中的i只有一个地址 golang 的 gc 算法,</description>
    </item>
    
    <item>
      <title>First</title>
      <link>https://blog.glc.im/posts/first/</link>
      <pubDate>Sun, 21 Jun 2020 11:00:53 +0800</pubDate>
      
      <guid>https://blog.glc.im/posts/first/</guid>
      <description>排序你的文章 weight: 40 使用这两个参数将会重置permalink，默认使用文件名 url: slug: 别名将通过重定向实现 aliases: 别名1 /posts/my-original-url/ /2010/01/01/another-url.html</description>
    </item>
    
    <item>
      <title>go-redis.md</title>
      <link>https://blog.glc.im/posts/go-redis%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sun, 21 Jun 2020 11:00:53 +0800</pubDate>
      
      <guid>https://blog.glc.im/posts/go-redis%E7%9B%B8%E5%85%B3/</guid>
      <description>https://gopher.cc/go-redis-%E8%BF%9E%E6%8E%A5%E6%B1%A0-529.html // 定义redis链接池 var client *redis.Client // 初始化redis链接池 func init() { db, err := beego.AppConfig.Int(&amp;#34;redisDB&amp;#34;) if err != nil { logs.Error(&amp;#34;redis-db&amp;#34;, err) } client = redis.NewClient(&amp;amp;redis.Options{ Addr: beego.AppConfig.String(&amp;#34;redisAddr&amp;#34;), // Redis地址 Password: beego.AppConfig.String(&amp;#34;redisPassword&amp;#34;), // Redis账号 DB: db, // Re</description>
    </item>
    
    <item>
      <title>HACKING.md</title>
      <link>https://blog.glc.im/posts/hacking/</link>
      <pubDate>Sun, 21 Jun 2020 11:00:53 +0800</pubDate>
      
      <guid>https://blog.glc.im/posts/hacking/</guid>
      <description>https://github.com/golang/go/blob/master/src/runtime/HACKING.md 待翻译 This is a living document and at times it will be out of date. It is intended to articulate how programming in the Go runtime differs from writing normal Go. It focuses on pervasive concepts rather than details of particular interfaces. Scheduler structures The scheduler manages three types of resources that pervade the runtime: Gs, Ms, and Ps. It&amp;rsquo;s important to understand these even if you&amp;rsquo;re</description>
    </item>
    
    <item>
      <title>MPG.md</title>
      <link>https://blog.glc.im/posts/mpg%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sun, 21 Jun 2020 11:00:53 +0800</pubDate>
      
      <guid>https://blog.glc.im/posts/mpg%E7%9B%B8%E5%85%B3/</guid>
      <description>MPG 链接：https://www.zhihu.com/question/20862617/answer/36191625 要理解这个事儿首先得了</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://blog.glc.im/about/</link>
      <pubDate>Fri, 15 Feb 2019 19:52:03 +0800</pubDate>
      
      <guid>https://blog.glc.im/about/</guid>
      <description>你好！我是Imp1mp 喜欢golang</description>
    </item>
    
    <item>
      <title>The &#34;figure&#34; Shortcode</title>
      <link>https://blog.glc.im/posts/backup/the-figure-shortcode/</link>
      <pubDate>Mon, 24 Dec 2018 12:29:41 +0800</pubDate>
      
      <guid>https://blog.glc.im/posts/backup/the-figure-shortcode/</guid>
      <description>Hugo has figure shortcode built in, so you can easily add figcaptions or hyperlink rel attributes to images. Documentations can be found here:
https://gohugo.io/content-management/shortcodes/#figure
This theme has 3 CSS classes made for figure elements:
 big: images will break the width limit of main content area. left: images will float to the left. right: images will float to the right.  If a figure has no class set, the image will behave just like a normal markdown image: !</description>
    </item>
    
    <item>
      <title>Post With Featured Image</title>
      <link>https://blog.glc.im/posts/backup/post-with-featured-image/</link>
      <pubDate>Mon, 01 Oct 2018 16:15:09 +0800</pubDate>
      
      <guid>https://blog.glc.im/posts/backup/post-with-featured-image/</guid>
      <description>Just define the image URL in the content’s front matter, the featured image will be displayed as the background.
For example:
---images:- https://picsum.photos/1024/768/?random---This is an array, you can set multiple urls, only the first url will be used. These images is also used in Twitter Cards and the Open Graph metadata.</description>
    </item>
    
    <item>
      <title>Typography</title>
      <link>https://blog.glc.im/posts/backup/typography/</link>
      <pubDate>Sat, 29 Sep 2018 11:36:33 +0800</pubDate>
      
      <guid>https://blog.glc.im/posts/backup/typography/</guid>
      <description>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
 An apple is a sweet, edible fruit produced by an apple tree (Malus pumila).</description>
    </item>
    
  </channel>
</rss>