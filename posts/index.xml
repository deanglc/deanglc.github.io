<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Imp1mp</title>
		<link>https://blog.glc.im/posts/</link>
		<description>Recent content in Posts on Imp1mp</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-hans</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sun, 21 Jun 2020 11:00:53 +0800</lastBuildDate>
		<atom:link href="https://blog.glc.im/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>使用acme申请https免费证书</title>
			<link>https://blog.glc.im/posts/%E4%BD%BF%E7%94%A8acme%E7%94%B3%E8%AF%B7https%E8%AF%81%E4%B9%A6/</link>
			<pubDate>Thu, 20 Dec 2018 21:38:52 +0800</pubDate>
			
			<guid>https://blog.glc.im/posts/%E4%BD%BF%E7%94%A8acme%E7%94%B3%E8%AF%B7https%E8%AF%81%E4%B9%A6/</guid>
			<description>前言 ​ 上次写了一篇https证书相关的笔记整理,个人觉得有些地方欠妥,这次介绍一个更方便更简单更🐂一点的工具——acme.sh.上次使用的工</description>
			<content type="html"><![CDATA[<h3 id="前言">前言</h3>
<hr>
<p>​	上次写了一篇<a href="https://juejin.im/post/5be2ab1a51882516d85b40c3">https证书相关的笔记整理</a>,个人觉得有些地方欠妥,这次介绍一个更方便更简单更🐂一点的工具——acme.sh.上次使用的工具是certbot.</p>
<p>两者对比,acme.sh有如下优点:</p>
<ul>
<li>acme.sh会自动设置好定时任务.自动更新证书.certbot的更新需要手动设置cron.</li>
<li>acme.sh可以使用域名解析商提供的 api 自动添加 txt 记录完成验证.简单、高效.</li>
<li>安装简单,没有环境依赖.卸载同样简单.</li>
</ul>
<h3 id="安装">安装</h3>
<hr>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 建议使用root安装,</span>
curl  https://get.acme.sh <span class="p">|</span> sh 
</code></pre></div><p>该命令会把acme安装在~/.acme.sh路径下,并为你创建一个检查更新证书的定时任务.</p>
<p>因为该工具有个参数reloadcmd可以预设命令,可能会reload nginx服务器等.建议使用root安装.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">#查看定时任务</span>
crontab -l
<span class="m">23</span> <span class="m">0</span> * * * <span class="s2">&#34;/root/.acme.sh&#34;</span>/acme.sh --cron --home <span class="s2">&#34;/root/.acme.sh&#34;</span> &gt; /dev/null
<span class="c1"># --home --cron参数解释可用~/.acme.sh/acme.sh -h查看,解释如下</span>
  --home                   Specifies the home dir <span class="k">for</span> acme.sh.指定acme的路径
  --cron                   Run cron job to renew all the certs.定时检查更新证书
</code></pre></div><h3 id="签发证书issue-a-cert">签发证书(Issue a cert)</h3>
<hr>
<p>签发证书前,需要验证域名的所有权,<a href="https://github.com/Neilpang/acme.sh/wiki/How-to-issue-a-cert">acme支持多种方式验证</a>,建议使用http和dns验证.</p>
<p>我的个人域名解析使用的是cloudflare的free套餐,且acme文档写明支持cloudflare.所以选择dns验证.</p>
<p>依照<a href="https://github.com/Neilpang/acme.sh/wiki/dnsapi">acme文档-how-to-use-dns-api</a>,</p>
<p>1.登录cloudflare官网获取API key.</p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">#cloudflare--&gt;个人配置---&gt;API key - Global API Key - view API key</span>
<span class="c1"># 拿到API key后,设置如下环境变量.</span>
<span class="nb">export</span> <span class="nv">CF_Key</span><span class="o">=</span><span class="s2">&#34;sdfsdfsdfljlbjkljlkjsdfoiwje&#34;</span>
<span class="nb">export</span> <span class="nv">CF_Email</span><span class="o">=</span><span class="s2">&#34;xxxx@sss.com&#34;</span>
</code></pre></div><p>接下来就可以愉快的申请证书了.</p>
<p><strong>申请证书命令如下:</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">acme.sh --issue -d glc.im -d *.glc.im --dns dns_cf <span class="se">\ </span>
--key-file <span class="s2">&#34;/etc/nginx/ssl/glc.im/xxxx.key&#34;</span> <span class="se">\ </span>
--fullchain-file <span class="s2">&#34;/etc/nginx/ssl/fullchain.cer&#34;</span> <span class="se">\ </span>
--reloadcmd <span class="s2">&#34;service nginx reload&#34;</span>
</code></pre></div><ul>
<li>glc.im /*.glc.im换成自己的域名</li>
<li>dns_cf是对应的cloudflare,其他域名解析服务商请参照https://github.com/Neilpang/acme.sh/wiki/dnsapi</li>
<li>key-file/fullchain-fil 签发证书后,acme会帮你把证书复制到该路径下</li>
<li>reloadcmd 因为是root安装的acme 此命令可以帮助我重载nginx</li>
</ul>
<h3 id="更多内容">更多内容</h3>
<hr>
<ul>
<li>
<p><strong>acme:</strong> <a href="https://github.com/Neilpang/acme.sh/wiki">https://github.com/Neilpang/acme.sh/wiki</a></p>
</li>
<li>
<p>如何使githu page跳转到个人域名?</p>
</li>
<li>
<p>如何强制跳转https?</p>
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>2016.md</title>
			<link>https://blog.glc.im/posts/2016/</link>
			<pubDate>Sun, 21 Jun 2020 11:00:53 +0800</pubDate>
			
			<guid>https://blog.glc.im/posts/2016/</guid>
			<description>Golang goroutine 和 kernel thread 之间是什么关系？ goroutine 是怎么调度的？ 看一下这段代码有没有问题(一段 golang for-range 里 goroutine 闭包捕获的代码)，为什么? 循环中的i只有一个地址 golang 的 gc 算法,</description>
			<content type="html"><![CDATA[<h3 id="golang">Golang</h3>
<hr>
<p>goroutine 和 kernel thread 之间是什么关系？</p>
<p>goroutine 是怎么调度的？</p>
<p>看一下这段代码有没有问题(一段 golang for-range 里 goroutine 闭包捕获的代码)，为什么?</p>
<ul>
<li>循环中的i只有一个地址</li>
</ul>
<p>golang 的 gc 算法,三色标记</p>
<p>Golang 的 GC 触发时机是什么</p>
<ul>
<li>阈值触发</li>
<li>主动触发</li>
<li>2分钟定时触发</li>
</ul>
<p>###算法</p>
<hr>
<p>从无限的字符流中, 随机选出 10 个字符</p>
<ul>
<li>没见过也没想出来，查了一下是<a href="https://www.jianshu.com/p/7a9ea6ece2af">蓄水池采样算法</a>，经典面试题，没刷题吃亏了</li>
</ul>
<p>一道笔试题: 需要在给的链接中作答, 不能 google, 不能跳出, 不能用 IDE:</p>
<ul>
<li><em>启动两个线程, 一个输出 1,3,5,7…99, 另一个输出 2,4,6,8…100 最后 STDOUT 中按序输出 1,2,3,4,5…100</em></li>
</ul>
<p>写一个算法题: 手写快排</p>
<p>平时一般会用到哪些数据结构？</p>
<p>链表和数组相比, 有什么优劣？</p>
<p>如何判断两个无环单链表有没有交叉点</p>
<p>如何判断两个有环单链表有没有交叉点</p>
<p>如何判断一个单链表有没有环, 并找出入环点</p>
<p>算法题, M*N 横向纵向均递增的矩阵找指定数</p>
<ul>
<li>只想到 O(M+N)的解法 <strong>补充</strong>: 这几天刷 leetcode 碰到这题了, <a href="https://leetcode.com/problems/search-a-2d-matrix-ii/">240. Search a 2D Matrix II</a>. 办法是从左下角或右下角开始查找</li>
</ul>
<p>###网络</p>
<hr>
<ul>
<li>TCP 和 UDP 有什么区别?</li>
<li>描述一下 TCP 四次挥手的过程中</li>
<li>TCP 有哪些状态</li>
<li>TCP 的 LISTEN 状态是什么</li>
<li>TCP 的 CLOSE_WAIT 状态是什么</li>
<li>建立一个 socket 连接要经过哪些步骤</li>
<li>常见的 HTTP 状态码有哪些</li>
<li>301和302有什么区别</li>
<li>504和500有什么区别</li>
<li>HTTPS 和 HTTP 有什么区别</li>
</ul>
<h2 id="待分类">待分类</h2>
<hr>
<ul>
<li>
<p>tcp 于 http 的关系，如何基于 tcp 实现 http</p>
</li>
<li>
<p>分布式锁是锁住一部分还是整个系统，既然是锁住整个，为什么不用消息队列？</p>
</li>
<li>
<p>Java 打开一个 http 流不关闭的后果</p>
</li>
<li>
<p>数据库的乐观锁和悲观锁是什么</p>
</li>
<li>
<p>乐观锁实现原理，讲到一半，来写一个乐观锁吧</p>
</li>
<li>
<p>线程安全是什么?</p>
</li>
<li>
<p>Spring为什么要用简单工厂模式？</p>
</li>
<li>
<p>微服务了解过吧(了解过一点)，微服务都有什么好处？</p>
</li>
<li>
<p>微服务都有哪些框架或中间件？</p>
</li>
<li>
<p>MySQL 死锁发生的原因和解决</p>
<p>MySQL 分别建立索引 a,b,c ，语句 select &hellip;where b=x,c=x,a=x 能不能用到索引，建立联合索引能不能用到，a=x,b&gt;x，能不能用到，用到几个索引？</p>
<p>B 树和 b+ 树的区别 b+ 树的优点</p>
<p>Linux cpu 满了怎么排查？</p>
<p>怎么查看占 cpu 最多的线程？</p>
<p>Linux怎么搜索文件中的字符串，写到另一个文件中</p>
<p>liunx 网络相关命令</p>
<p>如何判断链表是否有环</p>
<p>什么是泛型 泛型的使用场景</p>
<p>面向过程和面向对象（一紧张差点三大特性的多态想了十秒才说出来）</p>
<p>多态是什么？父类如何调用子类的方法</p>
<p>问我看了啥书（设计模式，图解HTTP，Modern PHP&hellip;被打断然后开始问设计模式）</p>
<p>进程调度、虚拟内存、进程与线程的区别、如何判断进程是否发生了内存泄漏</p>
<p>常见的设计模式</p>
<p>tcp与udp区别、tcp三次握手和四次挥手、流量控制、拥塞控制（四个算法，问得很细）</p>
<p>分布式事务（并说一下2PC）、redis底层数据结构有哪些、持久化方式</p>
<p>B+树索引和hash索引的区别</p>
<p>redis分布式锁，其他实现方式，zookeeper如何实现的？</p>
<p>分布式的一致性，强一致性和最终一致性</p>
<p>Linux如何查看IO读写很高</p>
<p>集群脑裂</p>
<p>Linux中异步IO是如何实现的，消息队列如何实现的？</p>
<p>Redis持久化，“并发高，数据量小”和“并发低，数据量大”，redis怎么选择存储模式</p>
<p>Mysql主从复制原理，mysql中如何做故障转移（容灾）</p>
<p>Nginx生命周期</p>
<p>疫情期间，如果让你去调研所在城市口罩的可用量，有哪些方案？</p>
<p>作者：Java程序猿阿谷
链接：https://www.jianshu.com/p/d6e9b1c211dd</p>
<p>![image-20200606163326250](<a href="https://tva1.sinaimg.cn/large/007S8ZIlgy1gfinl8rrrvj319n0u0162.jpg">https://tva1.sinaimg.cn/large/007S8ZIlgy1gfinl8rrrvj319n0u0162.jpg</a></p>
</li>
<li>
<p>redis 的热 key 你们是怎么优化的? (这里同样对于 redis 集群的结构, 内存多大, 淘汰策略, 热 key 的发现, 解决方案的调研核选型等等也要很清楚)</p>
<p>mysql 的调优是什么场景? (同样的, 表多大, 问题是什么, 怎么优化的, 途径是什么, 效果怎么样. 另外肯定会引申出的索引结构, 最左匹配等等一系列烂大街的问题, 虽然这些问题一搜网上全有, 掌握是相当重要的)</p>
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>First</title>
			<link>https://blog.glc.im/posts/first/</link>
			<pubDate>Sun, 21 Jun 2020 11:00:53 +0800</pubDate>
			
			<guid>https://blog.glc.im/posts/first/</guid>
			<description>排序你的文章 weight: 40 使用这两个参数将会重置permalink，默认使用文件名 url: slug: 别名将通过重定向实现 aliases: 别名1 /posts/my-original-url/ /2010/01/01/another-url.html</description>
			<content type="html"><![CDATA[<h1 id="排序你的文章">排序你的文章</h1>
<p>weight: 40</p>
<h1 id="使用这两个参数将会重置permalink默认使用文件名">使用这两个参数将会重置permalink，默认使用文件名</h1>
<p>url:
slug:</p>
<h1 id="别名将通过重定向实现">别名将通过重定向实现</h1>
<p>aliases:</p>
<ul>
<li>别名1</li>
<li>/posts/my-original-url/</li>
<li>/2010/01/01/another-url.html</li>
</ul>
<hr>
]]></content>
		</item>
		
		<item>
			<title>go-redis.md</title>
			<link>https://blog.glc.im/posts/go-redis%E7%9B%B8%E5%85%B3/</link>
			<pubDate>Sun, 21 Jun 2020 11:00:53 +0800</pubDate>
			
			<guid>https://blog.glc.im/posts/go-redis%E7%9B%B8%E5%85%B3/</guid>
			<description>https://gopher.cc/go-redis-%E8%BF%9E%E6%8E%A5%E6%B1%A0-529.html // 定义redis链接池 var client *redis.Client // 初始化redis链接池 func init() { db, err := beego.AppConfig.Int(&amp;#34;redisDB&amp;#34;) if err != nil { logs.Error(&amp;#34;redis-db&amp;#34;, err) } client = redis.NewClient(&amp;amp;redis.Options{ Addr: beego.AppConfig.String(&amp;#34;redisAddr&amp;#34;), // Redis地址 Password: beego.AppConfig.String(&amp;#34;redisPassword&amp;#34;), // Redis账号 DB: db, // Re</description>
			<content type="html"><![CDATA[<p><a href="https://gopher.cc/go-redis-%E8%BF%9E%E6%8E%A5%E6%B1%A0-529.html">https://gopher.cc/go-redis-%E8%BF%9E%E6%8E%A5%E6%B1%A0-529.html</a></p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 定义redis链接池
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">client</span> <span class="o">*</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Client</span>

<span class="c1">// 初始化redis链接池
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">db</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">beego</span><span class="p">.</span><span class="nx">AppConfig</span><span class="p">.</span><span class="nf">Int</span><span class="p">(</span><span class="s">&#34;redisDB&#34;</span><span class="p">)</span>
  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
    <span class="nx">logs</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="s">&#34;redis-db&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="nx">client</span> <span class="p">=</span> <span class="nx">redis</span><span class="p">.</span><span class="nf">NewClient</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">redis</span><span class="p">.</span><span class="nx">Options</span><span class="p">{</span>
    <span class="nx">Addr</span><span class="p">:</span>         <span class="nx">beego</span><span class="p">.</span><span class="nx">AppConfig</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;redisAddr&#34;</span><span class="p">),</span>     <span class="c1">// Redis地址
</span><span class="c1"></span>    <span class="nx">Password</span><span class="p">:</span>     <span class="nx">beego</span><span class="p">.</span><span class="nx">AppConfig</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;redisPassword&#34;</span><span class="p">),</span> <span class="c1">// Redis账号
</span><span class="c1"></span>    <span class="nx">DB</span><span class="p">:</span>           <span class="nx">db</span><span class="p">,</span>                                      <span class="c1">// Redis库
</span><span class="c1"></span>    <span class="nx">PoolSize</span><span class="p">:</span>     <span class="mi">40</span><span class="p">,</span>                                      <span class="c1">// Redis连接池大小
</span><span class="c1"></span>    <span class="nx">MaxRetries</span><span class="p">:</span>   <span class="mi">3</span><span class="p">,</span>                                       <span class="c1">// 最大重试次数
</span><span class="c1"></span>    <span class="nx">IdleTimeout</span><span class="p">:</span>  <span class="mi">5</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>                         <span class="c1">// 空闲链接超时时间
</span><span class="c1"></span>    <span class="nx">MinIdleConns</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>                                       <span class="c1">// 空闲连接数量
</span><span class="c1"></span>  <span class="p">})</span>
  <span class="nx">pong</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Ping</span><span class="p">().</span><span class="nf">Result</span><span class="p">()</span>
  <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">Nil</span> <span class="p">{</span>
    <span class="nx">logs</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Redis异常&#34;</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
    <span class="nx">logs</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;失败:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">logs</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="nx">pong</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">Redis</span> <span class="kd">struct</span><span class="p">{}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="nx">Redis</span><span class="p">)</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">result</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">key</span><span class="p">).</span><span class="nf">Result</span><span class="p">()</span>
  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">err</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="kc">nil</span>
<span class="p">}</span>
</code></pre></div><p><img src="assets/1.jpg" alt="Options相关说明"></p>
<hr>
<p><a href="https://www.tizi365.com/archives/292.html">https://www.tizi365.com/archives/292.html</a></p>
]]></content>
		</item>
		
		<item>
			<title>HACKING.md</title>
			<link>https://blog.glc.im/posts/hacking/</link>
			<pubDate>Sun, 21 Jun 2020 11:00:53 +0800</pubDate>
			
			<guid>https://blog.glc.im/posts/hacking/</guid>
			<description>https://github.com/golang/go/blob/master/src/runtime/HACKING.md 待翻译 This is a living document and at times it will be out of date. It is intended to articulate how programming in the Go runtime differs from writing normal Go. It focuses on pervasive concepts rather than details of particular interfaces. Scheduler structures The scheduler manages three types of resources that pervade the runtime: Gs, Ms, and Ps. It&amp;rsquo;s important to understand these even if you&amp;rsquo;re</description>
			<content type="html"><![CDATA[<blockquote>
<p><a href="https://github.com/golang/go/blob/master/src/runtime/HACKING.md">https://github.com/golang/go/blob/master/src/runtime/HACKING.md</a> 待翻译</p>
</blockquote>
<p>This is a living document and at times it will be out of date. It is
intended to articulate how programming in the Go runtime differs from
writing normal Go. It focuses on pervasive concepts rather than
details of particular interfaces.</p>
<h1 id="scheduler-structures">Scheduler structures</h1>
<p>The scheduler manages three types of resources that pervade the
runtime: Gs, Ms, and Ps. It&rsquo;s important to understand these even if
you&rsquo;re not working on the scheduler.</p>
<h2 id="gs-ms-ps">Gs, Ms, Ps</h2>
<p>A &ldquo;G&rdquo; is simply a goroutine. It&rsquo;s represented by type <code>g</code>. When a
goroutine exits, its <code>g</code> object is returned to a pool of free <code>g</code>s and
can later be reused for some other goroutine.</p>
<p>An &ldquo;M&rdquo; is an OS thread that can be executing user Go code, runtime
code, a system call, or be idle. It&rsquo;s represented by type <code>m</code>. There
can be any number of Ms at a time since any number of threads may be
blocked in system calls.</p>
<p>Finally, a &ldquo;P&rdquo; represents the resources required to execute user Go
code, such as scheduler and memory allocator state. It&rsquo;s represented
by type <code>p</code>. There are exactly <code>GOMAXPROCS</code> Ps. A P can be thought of
like a CPU in the OS scheduler and the contents of the <code>p</code> type like
per-CPU state. This is a good place to put state that needs to be
sharded for efficiency, but doesn&rsquo;t need to be per-thread or
per-goroutine.</p>
<p>The scheduler&rsquo;s job is to match up a G (the code to execute), an M
(where to execute it), and a P (the rights and resources to execute
it). When an M stops executing user Go code, for example by entering a
system call, it returns its P to the idle P pool. In order to resume
executing user Go code, for example on return from a system call, it
must acquire a P from the idle pool.</p>
<p>All <code>g</code>, <code>m</code>, and <code>p</code> objects are heap allocated, but are never freed,
so their memory remains type stable. As a result, the runtime can
avoid write barriers in the depths of the scheduler.</p>
<h2 id="user-stacks-and-system-stacks">User stacks and system stacks</h2>
<p>Every non-dead G has a <em>user stack</em> associated with it, which is what
user Go code executes on. User stacks start small (e.g., 2K) and grow
or shrink dynamically.</p>
<p>Every M has a <em>system stack</em> associated with it (also known as the M&rsquo;s
&ldquo;g0&rdquo; stack because it&rsquo;s implemented as a stub G) and, on Unix
platforms, a <em>signal stack</em> (also known as the M&rsquo;s &ldquo;gsignal&rdquo; stack).
System and signal stacks cannot grow, but are large enough to execute
runtime and cgo code (8K in a pure Go binary; system-allocated in a
cgo binary).</p>
<p>Runtime code often temporarily switches to the system stack using
<code>systemstack</code>, <code>mcall</code>, or <code>asmcgocall</code> to perform tasks that must not
be preempted, that must not grow the user stack, or that switch user
goroutines. Code running on the system stack is implicitly
non-preemptible and the garbage collector does not scan system stacks.
While running on the system stack, the current user stack is not used
for execution.</p>
<h2 id="getg-and-getgmcurg"><code>getg()</code> and <code>getg().m.curg</code></h2>
<p>To get the current user <code>g</code>, use <code>getg().m.curg</code>.</p>
<p><code>getg()</code> alone returns the current <code>g</code>, but when executing on the
system or signal stacks, this will return the current M&rsquo;s &ldquo;g0&rdquo; or
&ldquo;gsignal&rdquo;, respectively. This is usually not what you want.</p>
<p>To determine if you&rsquo;re running on the user stack or the system stack,
use <code>getg() == getg().m.curg</code>.</p>
<h1 id="error-handling-and-reporting">Error handling and reporting</h1>
<p>Errors that can reasonably be recovered from in user code should use
<code>panic</code> like usual. However, there are some situations where <code>panic</code>
will cause an immediate fatal error, such as when called on the system
stack or when called during <code>mallocgc</code>.</p>
<p>Most errors in the runtime are not recoverable. For these, use
<code>throw</code>, which dumps the traceback and immediately terminates the
process. In general, <code>throw</code> should be passed a string constant to
avoid allocating in perilous situations. By convention, additional
details are printed before <code>throw</code> using <code>print</code> or <code>println</code> and the
messages are prefixed with &ldquo;runtime:&rdquo;.</p>
<p>For runtime error debugging, it&rsquo;s useful to run with
<code>GOTRACEBACK=system</code> or <code>GOTRACEBACK=crash</code>.</p>
<h1 id="synchronization">Synchronization</h1>
<p>The runtime has multiple synchronization mechanisms. They differ in
semantics and, in particular, in whether they interact with the
goroutine scheduler or the OS scheduler.</p>
<p>The simplest is <code>mutex</code>, which is manipulated using <code>lock</code> and
<code>unlock</code>. This should be used to protect shared structures for short
periods. Blocking on a <code>mutex</code> directly blocks the M, without
interacting with the Go scheduler. This means it is safe to use from
the lowest levels of the runtime, but also prevents any associated G
and P from being rescheduled. <code>rwmutex</code> is similar.</p>
<p>For one-shot notifications, use <code>note</code>, which provides <code>notesleep</code> and
<code>notewakeup</code>. Unlike traditional UNIX <code>sleep</code>/<code>wakeup</code>, <code>note</code>s are
race-free, so <code>notesleep</code> returns immediately if the <code>notewakeup</code> has
already happened. A <code>note</code> can be reset after use with <code>noteclear</code>,
which must not race with a sleep or wakeup. Like <code>mutex</code>, blocking on
a <code>note</code> blocks the M. However, there are different ways to sleep on a
<code>note</code>:<code>notesleep</code> also prevents rescheduling of any associated G and
P, while <code>notetsleepg</code> acts like a blocking system call that allows
the P to be reused to run another G. This is still less efficient than
blocking the G directly since it consumes an M.</p>
<p>To interact directly with the goroutine scheduler, use <code>gopark</code> and
<code>goready</code>. <code>gopark</code> parks the current goroutine—putting it in the
&ldquo;waiting&rdquo; state and removing it from the scheduler&rsquo;s run queue—and
schedules another goroutine on the current M/P. <code>goready</code> puts a
parked goroutine back in the &ldquo;runnable&rdquo; state and adds it to the run
queue.</p>
<p>In summary,</p>
<!-- raw HTML omitted -->
<h1 id="atomics">Atomics</h1>
<p>The runtime uses its own atomics package at <code>runtime/internal/atomic</code>.
This corresponds to <code>sync/atomic</code>, but functions have different names
for historical reasons and there are a few additional functions needed
by the runtime.</p>
<p>In general, we think hard about the uses of atomics in the runtime and
try to avoid unnecessary atomic operations. If access to a variable is
sometimes protected by another synchronization mechanism, the
already-protected accesses generally don&rsquo;t need to be atomic. There
are several reasons for this:</p>
<ol>
<li>
<p>Using non-atomic or atomic access where appropriate makes the code
more self-documenting. Atomic access to a variable implies there&rsquo;s
somewhere else that may concurrently access the variable.</p>
</li>
<li>
<p>Non-atomic access allows for automatic race detection. The runtime
doesn&rsquo;t currently have a race detector, but it may in the future.
Atomic access defeats the race detector, while non-atomic access
allows the race detector to check your assumptions.</p>
</li>
<li>
<p>Non-atomic access may improve performance.</p>
</li>
</ol>
<p>Of course, any non-atomic access to a shared variable should be
documented to explain how that access is protected.</p>
<p>Some common patterns that mix atomic and non-atomic access are:</p>
<ul>
<li>
<p>Read-mostly variables where updates are protected by a lock. Within
the locked region, reads do not need to be atomic, but the write
does. Outside the locked region, reads need to be atomic.</p>
</li>
<li>
<p>Reads that only happen during STW, where no writes can happen during
STW, do not need to be atomic.</p>
</li>
</ul>
<p>That said, the advice from the Go memory model stands: &ldquo;Don&rsquo;t be
[too] clever.&rdquo; The performance of the runtime matters, but its
robustness matters more.</p>
<h1 id="unmanaged-memory">Unmanaged memory</h1>
<p>In general, the runtime tries to use regular heap allocation. However,
in some cases the runtime must allocate objects outside of the garbage
collected heap, in <em>unmanaged memory</em>. This is necessary if the
objects are part of the memory manager itself or if they must be
allocated in situations where the caller may not have a P.</p>
<p>There are three mechanisms for allocating unmanaged memory:</p>
<ul>
<li>
<p>sysAlloc obtains memory directly from the OS. This comes in whole
multiples of the system page size, but it can be freed with sysFree.</p>
</li>
<li>
<p>persistentalloc combines multiple smaller allocations into a single
sysAlloc to avoid fragmentation. However, there is no way to free
persistentalloced objects (hence the name).</p>
</li>
<li>
<p>fixalloc is a SLAB-style allocator that allocates objects of a fixed
size. fixalloced objects can be freed, but this memory can only be
reused by the same fixalloc pool, so it can only be reused for
objects of the same type.</p>
</li>
</ul>
<p>In general, types that are allocated using any of these should be
marked <code>//go:notinheap</code> (see below).</p>
<p>Objects that are allocated in unmanaged memory <strong>must not</strong> contain
heap pointers unless the following rules are also obeyed:</p>
<ol>
<li>
<p>Any pointers from unmanaged memory to the heap must be garbage
collection roots. More specifically, any pointer must either be
accessible through a global variable or be added as an explicit
garbage collection root in <code>runtime.markroot</code>.</p>
</li>
<li>
<p>If the memory is reused, the heap pointers must be zero-initialized
before they become visible as GC roots. Otherwise, the GC may
observe stale heap pointers. See &ldquo;Zero-initialization versus
zeroing&rdquo;.</p>
</li>
</ol>
<h1 id="zero-initialization-versus-zeroing">Zero-initialization versus zeroing</h1>
<p>There are two types of zeroing in the runtime, depending on whether
the memory is already initialized to a type-safe state.</p>
<p>If memory is not in a type-safe state, meaning it potentially contains
&ldquo;garbage&rdquo; because it was just allocated and it is being initialized
for first use, then it must be <em>zero-initialized</em> using
<code>memclrNoHeapPointers</code> or non-pointer writes. This does not perform
write barriers.</p>
<p>If memory is already in a type-safe state and is simply being set to
the zero value, this must be done using regular writes, <code>typedmemclr</code>,
or <code>memclrHasPointers</code>. This performs write barriers.</p>
<h1 id="runtime-only-compiler-directives">Runtime-only compiler directives</h1>
<p>In addition to the &ldquo;//go:&rdquo; directives documented in &ldquo;go doc compile&rdquo;,
the compiler supports additional directives only in the runtime.</p>
<h2 id="gosystemstack">go:systemstack</h2>
<p><code>go:systemstack</code> indicates that a function must run on the system
stack. This is checked dynamically by a special function prologue.</p>
<h2 id="gonowritebarrier">go:nowritebarrier</h2>
<p><code>go:nowritebarrier</code> directs the compiler to emit an error if the
following function contains any write barriers. (It <em>does not</em>
suppress the generation of write barriers; it is simply an assertion.)</p>
<p>Usually you want <code>go:nowritebarrierrec</code>. <code>go:nowritebarrier</code> is
primarily useful in situations where it&rsquo;s &ldquo;nice&rdquo; not to have write
barriers, but not required for correctness.</p>
<h2 id="gonowritebarrierrec-and-goyeswritebarrierrec">go:nowritebarrierrec and go:yeswritebarrierrec</h2>
<p><code>go:nowritebarrierrec</code> directs the compiler to emit an error if the
following function or any function it calls recursively, up to a
<code>go:yeswritebarrierrec</code>, contains a write barrier.</p>
<p>Logically, the compiler floods the call graph starting from each
<code>go:nowritebarrierrec</code> function and produces an error if it encounters
a function containing a write barrier. This flood stops at
<code>go:yeswritebarrierrec</code> functions.</p>
<p><code>go:nowritebarrierrec</code> is used in the implementation of the write
barrier to prevent infinite loops.</p>
<p>Both directives are used in the scheduler. The write barrier requires
an active P (<code>getg().m.p != nil</code>) and scheduler code often runs
without an active P. In this case, <code>go:nowritebarrierrec</code> is used on
functions that release the P or may run without a P and
<code>go:yeswritebarrierrec</code> is used when code re-acquires an active P.
Since these are function-level annotations, code that releases or
acquires a P may need to be split across two functions.</p>
<h2 id="gonotinheap">go:notinheap</h2>
<p><code>go:notinheap</code> applies to type declarations. It indicates that a type
must never be allocated from the GC&rsquo;d heap. Specifically, pointers to
this type must always fail the <code>runtime.inheap</code> check. The type may be
used for global variables, for stack variables, or for objects in
unmanaged memory (e.g., allocated with <code>sysAlloc</code>, <code>persistentalloc</code>,
<code>fixalloc</code>, or from a manually-managed span). Specifically:</p>
<ol>
<li>
<p><code>new(T)</code>, <code>make([]T)</code>, <code>append([]T, ...)</code> and implicit heap
allocation of T are disallowed. (Though implicit allocations are
disallowed in the runtime anyway.)</p>
</li>
<li>
<p>A pointer to a regular type (other than <code>unsafe.Pointer</code>) cannot be
converted to a pointer to a <code>go:notinheap</code> type, even if they have
the same underlying type.</p>
</li>
<li>
<p>Any type that contains a <code>go:notinheap</code> type is itself
<code>go:notinheap</code>. Structs and arrays are <code>go:notinheap</code> if their
elements are. Maps and channels of <code>go:notinheap</code> types are
disallowed. To keep things explicit, any type declaration where the
type is implicitly <code>go:notinheap</code> must be explicitly marked
<code>go:notinheap</code> as well.</p>
</li>
<li>
<p>Write barriers on pointers to <code>go:notinheap</code> types can be omitted.</p>
</li>
</ol>
<p>The last point is the real benefit of <code>go:notinheap</code>. The runtime uses
it for low-level internal structures to avoid memory barriers in the
scheduler and the memory allocator where they are illegal or simply
inefficient. This mechanism is reasonably safe and does not compromise
the readability of the runtime.</p>
]]></content>
		</item>
		
		<item>
			<title>MPG.md</title>
			<link>https://blog.glc.im/posts/mpg%E7%9B%B8%E5%85%B3/</link>
			<pubDate>Sun, 21 Jun 2020 11:00:53 +0800</pubDate>
			
			<guid>https://blog.glc.im/posts/mpg%E7%9B%B8%E5%85%B3/</guid>
			<description>MPG 链接：https://www.zhihu.com/question/20862617/answer/36191625 要理解这个事儿首先得了</description>
			<content type="html"><![CDATA[<p>MPG 链接：https://www.zhihu.com/question/20862617/answer/36191625</p>
<p>要理解这个事儿首先得了解操作系统是怎么玩线程的。一个线程就是一个栈加一堆资源。操作系统一会让cpu跑线程A，一会让cpu跑线程B，靠A和B的栈来保存A和B的执行状态。每个线程都有他自己的栈。
但是线程又老贵了，花不起那个钱，所以go发明了goroutine。大致就是说给每个goroutine弄一个分配在heap里面的栈来模拟线程栈。比方说有3个goroutine，A,B,C，就在heap上弄三个栈出来。然后Go让一个单线程的scheduler开始跑他们仨。相当于 { A(); B(); C() }，连续的，串行的跑。
和操作系统不太一样的是，操作系统可以随时随地把你线程停掉，切换到另一个线程。这个单线程的scheduler没那个能力啊，他就是user space的一段朴素的代码，他跑着A的时候控制权是在A的代码里面的。A自己不退出谁也没办法。
所以A跑一小段后需要主动说，老大（scheduler），我不想跑了，帮我把我的所有的状态保存在我自己的栈上面，让我歇一会吧。这时候你可以看做A返回了。A返回了B就可以跑了，然后B跑一小段说，跑够了，保存状态，返回，然后C再跑。C跑一段也返回了。
这样跑完{A(); B(); C()}之后，我们发现，好像他们都只跑了一小段啊。所以外面要包一个循环，大致是：</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">goroutine_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">]</span>
<span class="k">while</span><span class="p">(</span><span class="n">goroutine</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">goroutine</span> <span class="ow">in</span> <span class="n">goroutine_list</span><span class="p">:</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">goroutine</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">r</span><span class="o">.</span><span class="n">finished</span><span class="p">():</span>
      <span class="n">goroutine_list</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</code></pre></div><p>比如跑完一圈A，B，C之后谁也没执行完，那么就在回到A执行一次。由于我们把A的栈保存在了HEAP里，这时候可以把A的栈复制粘贴会系统栈里（我很确定真实情况不是这么玩的，会意就行），然后再调用A，这时候由于A是跑到一半自己说跳出来的，所以会从刚刚跳出来的地方继续执行。比如A的内部大致上是这样</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">def A:
  上次跑到的地方 = 找到上次跑哪儿了
  读取所有临时变量
  goto 上次跑到的地方
  a = 1
  print(&#34;do something&#34;)
  go.scheduler.保存程序指针 // 设置&#34;这次跑哪儿了&#34;
  go.scheduler.保存临时变量们
  go.scheduler.跑够了_换人 //相当于return
  print(&#34;do something again&#34;)
  print(a)
</code></pre></div><p>第一次跑A，由于这是第一次，会打印do something，然后保存临时变量a，并保存跑到的地方，然后返回。再跑一次A，他会找到上次返回的地方的下一句，然后恢复临时变量a，然后接着跑，会打印“do something again&quot;和1</p>
<p>所以你看出来了，这个关键就在于每个goroutine跑一跑就要让一让。一般支持这种玩意（叫做coroutine）的语言都是让每个coroutine自己说，我跑够了，换人。goroutine比较文艺的地方就在于，他可以来帮你判断啥时候“跑够了”。</p>
<p>其中有一大半就是靠的你说的“异步并发”。go把每一个能异步并发的操作，像你说的文件访问啦，网络访问啦之类的都包包好，包成一个看似朴素的而且是同步的“方法”，比如string readFile（我瞎举得例子）。但是神奇的地方在于，这个方法里其实会调用“异步并发”的操作，比如某操作系统提供的asyncReadFile。你也知道，这种异步方法都是很快返回的。
所以你自己在某个goroutine里写了</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">string s = go.file.readFile(&#34;/root&#34;)
</code></pre></div><p>其实go偷偷在里面执行了某操作系统的API asyncReadFIle。跑起来之后呢，这个方法就会说，我当前所在的goroutine跑够啦，把刚刚跑的那个异步操作的结果保存下下，换人：</p>
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">// 实际上
handler h = someOS.asyncReadFile(&#34;/root&#34;) //很快返回一个handler
while (!h.finishedAsyncReadFile()): //很快返回Y/N
  go.scheduler.保存现状()
  go.scheduler.跑够了_换人() // 相当于return，不过下次会从这里的下一句开始执行
string s = h.getResultFromAsyncRead()
</code></pre></div><p>然后scheduler就换下一个goroutine跑了。等下次再跑回刚才那个goroutine的时候，他就看看，说那个asyncReadFile到底执行完没有啊，如果没有，就再换个人吧。如果执行完了，那就把结果拿出来，该干嘛干嘛。所以你看似写了个同步的操作，已经被go替换成异步操作了。</p>
<p>还有另外一种情况是，某个goroutine执行了某个不能异步调用的会blocking的系统调用，这个时候goroutine就没法玩那种异步调用的把戏了。他会把你挪到一个真正的线程里让你在那个县城里等着，他接茬去跑别的goroutine。比如A这么定义</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">A</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="s2">&#34;do something&#34;</span><span class="p">)</span>
  <span class="n">go</span><span class="o">.</span><span class="n">os</span><span class="o">.</span><span class="n">InvokeSomeReallyHeavyAndBlockingSystemCall</span><span class="p">()</span>
  <span class="k">print</span><span class="p">(</span><span class="s2">&#34;do something 2&#34;</span><span class="p">)</span>
</code></pre></div><p>go会帮你转成</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="err">真实的</span><span class="n">A</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="s2">&#34;do something&#34;</span><span class="p">)</span>
  <span class="n">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="n">new</span> <span class="n">Thread</span><span class="p">(</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="n">SomeReallyHeavyAndBlockingSystemCall</span><span class="p">();</span>
  <span class="p">})</span>
  <span class="n">t</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
  <span class="k">while</span> <span class="err">!</span><span class="n">t</span><span class="o">.</span><span class="n">finished</span><span class="p">():</span>
    <span class="n">go</span><span class="o">.</span><span class="n">scheduler</span><span class="o">.</span><span class="err">保存现状</span>
    <span class="n">go</span><span class="o">.</span><span class="n">scheduler</span><span class="o">.</span><span class="err">跑够了</span><span class="n">_换人</span>
  <span class="k">print</span><span class="p">(</span><span class="s2">&#34;finished&#34;</span><span class="p">)</span>
</code></pre></div><p>所以真实的A还是不会blocking，还是可以跟别的小伙伴(goroutine)愉快地玩耍（轮流往复的被执行），但他其实已经占了一个真是的系统线程了。</p>
<p>当然会有一种情况就是A完全没有调用任何可能的“异步并发”的操作，也没有调用任何的同步的系统调用，而是一个劲的用CPU做运算（比如用个死循环调用a++）。在早期的go里，这个A就把整个程序block住了。后面新版本的go好像会有一些处理办法，比如如果你A里面call了任意一个别的函数的话，就有一定几率被踢下去换人。好像也可以自己主动说我要换人的，可以去查查新的go的spec
另外，请不要在意语言细节，技术细节。会意即可</p>
<hr>
<p>###Golang 的 goroutine 是如何实现的？</p>
<p>链接：https://www.zhihu.com/question/20862617/answer/27964865</p>
<p><a href="https://link.zhihu.com/?target=http%3A//morsmachine.dk/go-scheduler">The Go scheduler</a> 纯翻译如下：</p>
<p>Go runtime的调度器：
在了解Go的运行时的scheduler之前，需要先了解为什么需要它，因为我们可能会想，OS内核不是已经有一个线程scheduler了嘛？
熟悉POSIX API的人都知道，POSIX的方案在很大程度上是对Unix process进场模型的一个逻辑描述和扩展，两者有很多相似的地方。 Thread有自己的信号掩码，CPU affinity等。但是很多特征对于Go程序来说都是累赘。 尤其是context上下文切换的耗时。另一个原因是Go的垃圾回收需要所有的goroutine停止，使得内存在一个一致的状态。垃圾回收的时间点是不确定的，如果依靠OS自身的scheduler来调度，那么会有大量的线程需要停止工作。</p>
<p>单独的开发一个GO得调度器，可以是其知道在什么时候内存状态是一致的，也就是说，当开始垃圾回收时，运行时只需要为当时正在CPU核上运行的那个线程等待即可，而不是等待所有的线程。</p>
<p>用户空间线程和内核空间线程之间的映射关系有：N:1,1:1和M:N
N:1是说，多个（N）用户线程始终在一个内核线程上跑，context上下文切换确实很快，但是无法真正的利用多核。
1：1是说，一个用户线程就只在一个内核线程上跑，这时可以利用多核，但是上下文switch很慢。
M:N是说， 多个goroutine在多个内核线程上跑，这个看似可以集齐上面两者的优势，但是无疑增加了调度的难度。</p>
<p><img src="https://pic1.zhimg.com/2f5c6ef32827fb4fc63c60f4f5314610_b.jpg" alt="img"><img src="https://pic1.zhimg.com/80/2f5c6ef32827fb4fc63c60f4f5314610_1440w.jpg" alt="img"></p>
<p>Go的调度器内部有三个重要的结构：M，P，S
M:代表真正的内核OS线程，和POSIX里的thread差不多，真正干活的人
G:代表一个goroutine，它有自己的栈，instruction pointer和其他信息（正在等待的channel等等），用于调度。
P:代表调度的上下文，可以把它看做一个局部的调度器，使go代码在一个线程上跑，它是实现从N:1到N:M映射的关键。</p>
<p><img src="https://pic1.zhimg.com/67f09d490f69eec14c1824d939938e14_b.jpg" alt="img"><img src="https://pic1.zhimg.com/80/67f09d490f69eec14c1824d939938e14_1440w.jpg" alt="img"></p>
<p>图中看，有2个物理线程M，每一个M都拥有一个context（P），每一个也都有一个正在运行的goroutine。
P的数量可以通过GOMAXPROCS()来设置，它其实也就代表了真正的并发度，即有多少个goroutine可以同时运行。
图中灰色的那些goroutine并没有运行，而是出于ready的就绪态，正在等待被调度。P维护着这个队列（称之为runqueue），
Go语言里，启动一个goroutine很容易：go function 就行，所以每有一个go语句被执行，runqueue队列就在其末尾加入一个
goroutine，在下一个调度点，就从runqueue中取出（如何决定取哪个goroutine？）一个goroutine执行。</p>
<p>为何要维护多个上下文P？因为当一个OS线程被阻塞时，P可以转而投奔另一个OS线程！
图中看到，当一个OS线程M0陷入阻塞时，P转而在OS线程M1上运行。调度器保证有足够的线程来运行所以的context P。</p>
<p><img src="https://pic3.zhimg.com/f1125f3027ebb2bd5183cf8c9ce4b3f2_b.jpg" alt="img"><img src="https://pic3.zhimg.com/80/f1125f3027ebb2bd5183cf8c9ce4b3f2_1440w.jpg" alt="img"></p>
<p>图中的M1可能是被创建，或者从线程缓存中取出。</p>
<p>当MO返回时，它必须尝试取得一个context P来运行goroutine，一般情况下，它会从其他的OS线程那里steal偷一个context过来，
如果没有偷到的话，它就把goroutine放在一个global runqueue里，然后自己就去睡大觉了（放入线程缓存里）。Contexts们也会周期性的检查global runqueue，否则global runqueue上的goroutine永远无法执行。</p>
<p><img src="https://pic2.zhimg.com/31f04bb69d72b72777568063742741cd_b.jpg" alt="img"><img src="https://pic2.zhimg.com/80/31f04bb69d72b72777568063742741cd_1440w.jpg" alt="img"></p>
<p>另一种情况是P所分配的任务G很快就执行完了（分配不均），这就导致了一个上下文P闲着没事儿干而系统却任然忙碌。但是如果global runqueue没有任务G了，那么P就不得不从其他的上下文P那里拿一些G来执行。一般来说，如果上下文P从其他的上下文P那里要偷一个任务的话，一般就‘偷’run queue的一半，这就确保了每个OS线程都能充分的使用。</p>
<hr>
<h3 id="为什么协程切换的代价比线程切换低-httpswwwzhihucomquestion308641794">为什么协程切换的代价比线程切换低? <a href="https://www.zhihu.com/question/308641794">https://www.zhihu.com/question/308641794</a></h3>
<p>核心在于，线程切换需要借助内核完成，意味着一次用户态到内核态的切换，以及一次内核态到用户态的切换。而协程的切换只在用户态就可以完成，无需借助内核，也就不需要进入内核态。</p>
<p>用户态和内核态的切换才是最主要的开销。</p>
<hr>
<p><a href="http://interview.wzcu.com/Golang/goroutine.html#goroutine-%E5%92%8C-thread-%E7%9A%84%E5%8C%BA%E5%88%AB">http://interview.wzcu.com/Golang/goroutine.html#goroutine-%E5%92%8C-thread-%E7%9A%84%E5%8C%BA%E5%88%AB</a></p>
<hr>
<p>#GO夜读:https://www.youtube.com/watch?v=98pIzaOeD2k</p>
<p><strong>调度的机制用一句话描述：</strong>
runtime准备好G,P,M，然后M绑定一个P，最开始创建g0，然后调度g0，通过g0创建G，M从各种队列中获取G，在汇编代码层面上切换到G的执行栈上并执行G上的任务函数，执行完成后，调用goexit()（事前被放入了G的pc计数器，所以return后进入）做清理工作并回到M，M重新在队列中寻找G，如此反复。
运行函数 schedule() &ndash;找G&ndash;&gt; execute(g) &ndash;执行G，gogo(g)在汇编代码层面上真正执行G&ndash;&gt;goexit() &ndash;清理工作，重新将g0加入P的空闲队列&ndash;&gt;schedule()</p>
<h1 id="基本概念">基本概念</h1>
<hr>
<h4 id="mmachine">M（machine）</h4>
<ul>
<li>M代表着真正的执行计算资源，可以认为它就是os thread（系统线程）。每个M绑定一个 kernel。</li>
<li>M是真正调度系统的执行者，总是从各种队列（全局队列，本局队列等）中找到可运行的G，而且这样M的可以同时存在多个。</li>
<li>M在绑定有效的P后，进入调度循环，而且M并不保留G状态，这是G可以跨M调度的基础。</li>
</ul>
<h4 id="pprocessor">P（processor）</h4>
<ul>
<li>P表示逻辑processor，是线程M的执行的上下文。</li>
<li>P的最大作用是其拥有的各种G对象队列、链表、cache和状态。</li>
</ul>
<h4 id="ggoroutine">G（goroutine）</h4>
<ul>
<li>调度系统的最基本单位goroutine，存储了goroutine的执行stack信息、goroutine状态以及goroutine的任务函数等。</li>
<li>在G的眼中只有P，P就是运行G的“CPU”。</li>
<li>相当于两级线程</li>
</ul>
<p>M 的状态很少，G最多。一开始的Go是只有M和G的，但是存在很多的全局锁，导致性能很慢，后来加了P，有了本地队列，减少了锁。一个P底下最多有256个G(本地队列的长度)</p>
<h2 id="线程实现模型">线程实现模型</h2>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="err">来自</span><span class="no">Go并发编程实战</span>
                    <span class="o">+-------+</span>       <span class="o">+-------+</span>      
                    <span class="o">|</span>  <span class="no">KSE</span>  <span class="o">|</span>       <span class="o">|</span>  <span class="no">KSE</span>  <span class="o">|</span>          
                    <span class="o">+-------+</span>       <span class="o">+-------+</span>      
                        <span class="o">|</span>               <span class="o">|</span>                       <span class="err">内核空间</span>
<span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span>        
                        <span class="o">|</span>               <span class="o">|</span>                       <span class="err">用户空间</span>
                    <span class="o">+-------+</span>       <span class="o">+-------+</span>
                    <span class="o">|</span>   <span class="n">M</span>   <span class="o">|</span>       <span class="o">|</span>   <span class="n">M</span>   <span class="o">|</span>
                    <span class="o">+-------+</span>       <span class="o">+-------+</span>
                  <span class="o">|</span>          <span class="o">|</span>         <span class="o">|</span>          <span class="o">|</span>
              <span class="o">+------+</span>   <span class="o">+------+</span>   <span class="o">+------+</span>   <span class="o">+------+</span>            
              <span class="o">|</span>   <span class="n">P</span>  <span class="o">|</span>   <span class="o">|</span>   <span class="n">P</span>  <span class="o">|</span>   <span class="o">|</span>   <span class="n">P</span>  <span class="o">|</span>   <span class="o">|</span>   <span class="n">P</span>  <span class="o">|</span>
              <span class="o">+------+</span>   <span class="o">+------+</span>   <span class="o">+------+</span>   <span class="o">+------+</span>   
           <span class="o">|</span>     <span class="o">|</span>     <span class="o">|</span>     <span class="o">|</span>     <span class="o">|</span>     <span class="o">|</span>     <span class="o">|</span>     <span class="o">|</span>     <span class="o">|</span> 
         <span class="o">+---+</span> <span class="o">+---+</span> <span class="o">+---+</span> <span class="o">+---+</span> <span class="o">+---+</span> <span class="o">+---+</span> <span class="o">+---+</span> <span class="o">+---+</span> <span class="o">+---+</span> 
         <span class="o">|</span> <span class="n">G</span> <span class="o">|</span> <span class="o">|</span> <span class="n">G</span> <span class="o">|</span> <span class="o">|</span> <span class="n">G</span> <span class="o">|</span> <span class="o">|</span> <span class="n">G</span> <span class="o">|</span> <span class="o">|</span> <span class="n">G</span> <span class="o">|</span> <span class="o">|</span> <span class="n">G</span> <span class="o">|</span> <span class="o">|</span> <span class="n">G</span> <span class="o">|</span> <span class="o">|</span> <span class="n">G</span> <span class="o">|</span> <span class="o">|</span> <span class="n">G</span> <span class="o">|</span> 
         <span class="o">+---+</span> <span class="o">+---+</span> <span class="o">+---+</span> <span class="o">+---+</span> <span class="o">+---+</span> <span class="o">+---+</span> <span class="o">+---+</span> <span class="o">+---+</span> <span class="o">+---+</span> 
</code></pre></div><p>KSE（Kernel Scheduling Entity）是内核调度实体
M与P，P与G之前的关联都是动态的，可以变的</p>
<h2 id="关系示意图">关系示意图</h2>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="err">来自</span><span class="n">golang源码剖析</span>
                            <span class="o">+--------------------</span> <span class="n">sysmon</span> <span class="o">---------------//------+</span> 
                            <span class="o">|</span>                                                   <span class="o">|</span>
                            <span class="o">|</span>                                                   <span class="o">|</span>
               <span class="o">+---+</span>      <span class="o">+---+-------+</span>                   <span class="o">+--------+</span>          <span class="o">+---+---+</span>
<span class="n">go</span> <span class="n">func</span><span class="p">()</span> <span class="o">---&gt;</span> <span class="o">|</span> <span class="n">G</span> <span class="o">|</span> <span class="o">---&gt;</span> <span class="o">|</span> <span class="n">P</span> <span class="o">|</span> <span class="n">local</span> <span class="o">|</span> <span class="o">&lt;===</span> <span class="n">balance</span> <span class="o">===&gt;</span> <span class="o">|</span> <span class="n">global</span> <span class="o">|</span> <span class="o">&lt;--//---</span> <span class="o">|</span> <span class="n">P</span> <span class="o">|</span> <span class="n">M</span> <span class="o">|</span>
               <span class="o">+---+</span>      <span class="o">+---+-------+</span>                   <span class="o">+--------+</span>          <span class="o">+---+---+</span>
                            <span class="o">|</span>                                 <span class="o">|</span>                 <span class="o">|</span> 
                            <span class="o">|</span>      <span class="o">+---+</span>                      <span class="o">|</span>                 <span class="o">|</span>
                            <span class="o">+----&gt;</span> <span class="o">|</span> <span class="n">M</span> <span class="o">|</span> <span class="o">&lt;---</span> <span class="n">findrunnable</span> <span class="o">---+---</span> <span class="n">steal</span> <span class="o">&lt;--//--+</span>
                                   <span class="o">+---+</span> 
                                     <span class="o">|</span>
                                   <span class="n">mstart</span>
                                     <span class="o">|</span>
              <span class="o">+---</span> <span class="n">execute</span> <span class="o">&lt;-----</span> <span class="n">schedule</span> 
              <span class="o">|</span>                      <span class="o">|</span>   
              <span class="o">|</span>                      <span class="o">|</span>
              <span class="o">+--&gt;</span> <span class="n">G</span><span class="o">.</span><span class="n">fn</span> <span class="o">--&gt;</span> <span class="n">goexit</span> <span class="o">--+</span> 


              <span class="mi">1</span><span class="o">.</span> <span class="n">go</span> <span class="n">func</span><span class="p">()</span> <span class="err">语气创建</span><span class="n">G</span><span class="err">。</span>
              <span class="mi">2</span><span class="o">.</span> <span class="err">将</span><span class="no">G放入P的本地队列</span><span class="err">（或者平衡到全局全局队列）。</span>
              <span class="mi">3</span><span class="o">.</span> <span class="err">唤醒或新建</span><span class="no">M来执行任务</span><span class="err">。</span>
              <span class="mi">4</span><span class="o">.</span> <span class="err">进入调度循环</span>
              <span class="mi">5</span><span class="o">.</span> <span class="err">尽力获取可执行的</span><span class="n">G</span><span class="err">，并执行</span>
              <span class="mi">6</span><span class="o">.</span> <span class="err">清理现场并且重新进入调度循环</span>
</code></pre></div><p>上图的 schedule 循环，是调度循环，是不会停止的，通过环内的函数不断进行互相调用，而一直执行下去。</p>
<h1 id="必须了解的思想">必须了解的思想</h1>
<hr>
<h4 id="worker-thread-parkingunparking">Worker thread parking/unparking</h4>
<ul>
<li>涉及到 m 的 spinning 和 unspinning 状态</li>
<li>涉及到 gorotine ready 时候的操作</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go">    <span class="nx">我们需要在</span><span class="s">`保持足够的 running（运行中） 工作线程以利用可用的硬件并行性`</span> <span class="nx">与</span><span class="s">`停放过多的运行中工作线程以节省CPU资源和功耗`</span><span class="nx">之间进行权衡</span><span class="err">。</span>
    <span class="nx">这并不简单</span><span class="err">，</span><span class="nx">原因有二</span><span class="err">：（</span><span class="mi">1</span><span class="err">）</span><span class="nx">调度状态</span><span class="err">（</span><span class="nx">scheduler</span> <span class="nx">state</span><span class="err">）</span><span class="nx">是有意分配的</span><span class="err">（</span><span class="nx">特别是针对每个P的工作队列</span><span class="err">），</span><span class="nx">因此无法在</span> <span class="nx">fast</span> <span class="nx">paths</span> <span class="nx">上计算全局预测</span><span class="err">；</span> 
                        <span class="err">（</span><span class="mi">2</span><span class="err">）</span><span class="nx">为了实现最佳的线程管理</span><span class="err">，</span><span class="nx">我们需要知道未来的情况</span><span class="err">（</span><span class="nx">当一个</span> <span class="nx">goroutine</span> <span class="nx">不久将被</span> <span class="nx">readied</span> <span class="nx">时</span><span class="err">，</span><span class="nx">则不需要停靠工作线程</span><span class="err">）。</span>

    <span class="nx">三种被弃用的效果很差的方法</span><span class="err">：</span>
        <span class="mf">1.</span><span class="nx">集中所有调度状态</span><span class="err">（</span><span class="nx">scheduler</span> <span class="nx">state</span><span class="err">）</span>
            <span class="nx">将抑制可伸缩性</span><span class="err">）。</span>
        <span class="mf">2.</span><span class="nx">直接切换goroutine</span><span class="err">。</span> 
            <span class="nx">也就是说</span><span class="err">，</span><span class="nx">当我们准备好一个新的goroutine并且当前有一个备用P时</span><span class="err">，</span><span class="nx">释放一个线程</span><span class="err">，</span><span class="nx">并将该线程和goroutine转交给P</span><span class="err">。</span>
            <span class="nx">这将导致线程状态冲突</span><span class="err">（</span><span class="nx">thread</span> <span class="nx">state</span> <span class="nx">thrashing</span><span class="err">），</span><span class="nx">因为准备好goroutine的线程可能下一刻就停止了工作</span><span class="err">，</span><span class="nx">我们需要</span> <span class="nx">park</span> <span class="nx">该线程</span><span class="err">。</span>
            <span class="nx">另外</span><span class="err">，</span><span class="nx">由于我们要在同一线程上保留依赖的goroutine</span><span class="err">，</span><span class="nx">它将破坏计算的局部性</span><span class="err">。</span> <span class="nx">并引入额外的延迟</span><span class="err">。</span>
        <span class="mf">3.</span><span class="nx">每当我们准备好goroutine并且有一个空闲的P时</span><span class="err">，</span><span class="nx">unpark</span> <span class="nx">一个附加线程</span><span class="err">，</span><span class="nx">但不进行切换</span><span class="err">。</span> 
            <span class="nx">这将导致过多的线程</span> <span class="nx">parking</span><span class="o">/</span><span class="nx">unparking</span><span class="err">，</span><span class="nx">因为附加线程没有发现要执行的工作将立即</span> <span class="nx">park</span><span class="err">。</span>

    <span class="nx">当前方法</span><span class="err">：</span><span class="nx">准备好一个goroutine时</span><span class="err">，</span><span class="nx">如果当前有一个空闲</span> <span class="nx">P</span> <span class="nx">且没有</span><span class="err">“</span><span class="nx">spinning</span><span class="err">”</span><span class="nx">工作线程</span><span class="err">（</span><span class="nx">即处于</span> <span class="nx">spinning</span> <span class="nx">状态的</span> <span class="nx">M</span><span class="err">），</span><span class="nx">则我们</span> <span class="nx">unpark</span> <span class="nx">一个附加线程</span><span class="err">。</span>
            <span class="err">（“</span><span class="nx">spinning</span><span class="err">”</span><span class="nx">指一个工作线程</span> <span class="nx">M</span> <span class="nx">完成了本地工作</span><span class="err">，</span><span class="nx">并且在全局</span> <span class="nx">run</span> <span class="nx">queue</span> <span class="o">/</span> <span class="nx">netpoller</span> <span class="nx">中均未找到工作</span><span class="err">）</span>
             <span class="nx">the</span> <span class="nx">spinning</span> <span class="nx">state</span> <span class="nx">用</span> <span class="nx">m</span><span class="p">.</span><span class="nx">spinning</span> <span class="nx">和</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">nmspinning</span> <span class="nx">来表示</span><span class="err">，</span><span class="nx">前者表示</span> <span class="nx">M</span> <span class="nx">是否在</span> <span class="nx">spinning状态</span><span class="err">，</span><span class="nx">后者表示在</span> <span class="nx">spinning</span> <span class="nx">状态的</span> <span class="nx">M</span> <span class="nx">个数</span><span class="err">。</span>

             <span class="nx">通过上述方式</span> <span class="nx">unpark</span> <span class="nx">的线程也被认为是</span> <span class="nx">spinning</span> <span class="nx">状态的</span><span class="err">。</span><span class="nx">此时我们不执行goroutine切换</span><span class="err">，</span><span class="nx">因此此类线程最初是没有工作的</span><span class="err">。</span>
             <span class="err">“</span><span class="nx">spinning</span><span class="err">”</span><span class="nx">线程在</span> <span class="nx">park</span> <span class="nx">之前</span><span class="err">，</span><span class="nx">会在</span> <span class="nx">P</span> <span class="nx">的运行队列中寻找工作</span><span class="err">。</span><span class="nx">如果</span> <span class="nx">spinning</span> <span class="nx">线程找到工作</span><span class="err">，</span><span class="nx">它将退出</span> <span class="nx">spinning</span> <span class="nx">state</span> <span class="nx">并继续执行工作</span><span class="err">。</span><span class="nx">如果找不到工作</span><span class="err">，</span><span class="nx">它将退出</span> <span class="nx">spinning</span> <span class="nx">state</span><span class="err">，</span><span class="nx">然后</span> <span class="nx">park</span><span class="err">。</span>
    <span class="nx">如果至少有一个</span><span class="err">“</span><span class="nx">spinning</span><span class="err">”</span><span class="nx">线程</span><span class="err">（</span><span class="nx">sched</span><span class="p">.</span><span class="nx">nmspinning</span><span class="p">&gt;</span> <span class="mi">1</span><span class="err">），</span><span class="nx">则在准备goroutine时我们不会</span> <span class="nx">unpark</span> <span class="nx">新线程</span><span class="err">。</span><span class="nx">为了弥补这一点</span><span class="err">，</span><span class="nx">如果最后一个</span><span class="err">“</span><span class="nx">spinning</span><span class="err">”</span><span class="nx">线程找到了工作并停止</span><span class="err">“</span><span class="nx">spinning</span><span class="err">”，</span><span class="nx">则必须</span> <span class="nx">unpark</span> <span class="nx">一个新的</span><span class="err">“</span><span class="nx">spinning</span><span class="err">”</span><span class="nx">线程</span><span class="err">。</span>
    <span class="nx">这种方法可以消除线程</span> <span class="nx">unparking</span> <span class="nx">中的不合理的峰值</span><span class="err">，</span><span class="nx">但同时可以保证最终的最大CPU并行利用率</span><span class="err">。</span>

    <span class="nx">实现的主要复杂之处在于</span><span class="err">，</span><span class="nx">我们在线程从</span> <span class="nx">spinning</span><span class="o">-</span><span class="p">&gt;</span><span class="nx">non</span><span class="o">-</span><span class="nx">spinning</span> <span class="nx">过渡时</span><span class="err">，</span><span class="nx">需要非常小心</span><span class="err">。</span> <span class="nx">这种过渡可能会与新goroutine的提交相互竞争</span><span class="err">，</span><span class="nx">同时一部分或另一部分需要</span> <span class="nx">unpark</span> <span class="nx">另一个工作线程</span><span class="err">。</span><span class="nx">如果它们俩都失败了</span><span class="err">，</span><span class="nx">那么我们可能会导致半永久性的CPU利用率不足</span><span class="err">。</span>
    <span class="nx">goroutine准备的一般模式是</span><span class="err">：</span><span class="nx">将goroutine提交到本地工作队列</span><span class="err">，＃</span><span class="nx">StoreLoad</span><span class="o">-</span><span class="nx">style</span> <span class="nx">memory</span> <span class="nx">barrier</span><span class="err">，</span><span class="nx">检查sched</span><span class="p">.</span><span class="nx">nmspinning</span><span class="err">。</span>
    <span class="nx">spinning</span><span class="o">-</span><span class="p">&gt;</span><span class="nx">non</span><span class="o">-</span><span class="nx">spinning</span> <span class="nx">过渡的一般模式是</span><span class="err">：</span><span class="nx">递减nmspinning</span><span class="err">，＃</span><span class="nx">StoreLoad</span><span class="o">-</span><span class="nx">style</span> <span class="nx">memory</span> <span class="nx">barrier</span><span class="err">，</span><span class="nx">检查所有</span> <span class="nx">P</span> <span class="nx">的本地工作队列中是否有新工作</span><span class="err">。</span>
    <span class="nx">请注意</span><span class="err">，</span><span class="nx">所有这些复杂性都不适用于全局运行队列</span><span class="err">，</span><span class="nx">因为在提交到全局队列时</span><span class="err">，</span><span class="nx">我们对线程的</span> <span class="nx">unparking</span> <span class="nx">并不草率</span><span class="err">。</span> <span class="nx">另请参见有关nmspinning操作的注释</span><span class="err">。</span>
</code></pre></div><h1 id="gpm的来由">GPM的来由</h1>
<hr>
<p>g0和m0是在proc.go文件中的两个全局变量
m0：进程启动后的初始线程
g0：代表着初始线程的stack
asm_amd64.go &ndash;&gt; runtime·rt0_go(SB)</p>
<div class="highlight"><pre class="chroma"><code class="language-cpp" data-lang="cpp">    <span class="c1">// 程序刚启动的时候必定有一个线程启动（主线程）
</span><span class="c1"></span>    <span class="c1">// 将当前的栈和资源保存在g0
</span><span class="c1"></span>    <span class="c1">// 将该线程保存在m0
</span><span class="c1"></span>    <span class="c1">// tls: Thread Local Storage
</span><span class="c1"></span>    <span class="c1">// set the per-goroutine and per-mach &#34;registers&#34;
</span><span class="c1"></span>    <span class="n">get_tls</span><span class="p">(</span><span class="n">BX</span><span class="p">)</span>
    <span class="n">LEAQ</span>    <span class="n">runtime</span><span class="err">·</span><span class="n">g0</span><span class="p">(</span><span class="n">SB</span><span class="p">),</span> <span class="n">CX</span>
    <span class="n">MOVQ</span>    <span class="n">CX</span><span class="p">,</span> <span class="n">g</span><span class="p">(</span><span class="n">BX</span><span class="p">)</span>
    <span class="n">LEAQ</span>    <span class="n">runtime</span><span class="err">·</span><span class="n">m0</span><span class="p">(</span><span class="n">SB</span><span class="p">),</span> <span class="n">AX</span>

    <span class="c1">// save m-&gt;g0 = g0
</span><span class="c1"></span>    <span class="n">MOVQ</span>    <span class="n">CX</span><span class="p">,</span> <span class="n">m_g0</span><span class="p">(</span><span class="n">AX</span><span class="p">)</span>
    <span class="c1">// save m0 to g0-&gt;m
</span><span class="c1"></span>    <span class="n">MOVQ</span>    <span class="n">AX</span><span class="p">,</span> <span class="n">g_m</span><span class="p">(</span><span class="n">CX</span><span class="p">)</span>
</code></pre></div><h2 id="m的一生">M的一生</h2>
<h4 id="m的创建">M的创建</h4>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">proc.go
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-swift" data-lang="swift"><span class="c1">// Create a new m. It will start off with a call to fn, or else the scheduler.</span>
<span class="c1">// fn needs to be static and not a heap allocated closure.</span>
<span class="c1">// May run with m.p==nil, so write barriers are not allowed.</span>
<span class="c1">//go:nowritebarrierrec</span>
<span class="c1">// 创建一个新的m，它将从fn或者调度程序开始</span>
<span class="kd">func</span> <span class="nf">newm</span><span class="p">(</span><span class="n">fn</span> <span class="kd">func</span><span class="p">(),</span> <span class="n">_p_</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 根据fn和p和绑定一个m对象</span>
    <span class="n">mp</span> <span class="p">:=</span> <span class="n">allocm</span><span class="p">(</span><span class="n">_p_</span><span class="p">,</span> <span class="n">fn</span><span class="p">)</span>
    <span class="c1">// 设置当前m的下一个p为_p_</span>
    <span class="n">mp</span><span class="p">.</span><span class="n">nextp</span><span class="p">.</span><span class="kr">set</span><span class="p">(</span><span class="n">_p_</span><span class="p">)</span>
    <span class="n">mp</span><span class="p">.</span><span class="n">sigmask</span> <span class="p">=</span> <span class="n">initSigmask</span>
    <span class="p">...</span>
    <span class="c1">// 真正的分配os thread</span>
    <span class="n">newm1</span><span class="p">(</span><span class="n">mp</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">newm1</span><span class="p">(</span><span class="nx">mp</span> <span class="o">*</span><span class="nx">m</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 对cgo的处理
</span><span class="c1"></span>    <span class="o">...</span>
    <span class="nx">execLock</span><span class="p">.</span><span class="nf">rlock</span><span class="p">()</span> <span class="c1">// Prevent process clone.
</span><span class="c1"></span>    <span class="c1">// 创建一个系统线程
</span><span class="c1"></span>    <span class="nf">newosproc</span><span class="p">(</span><span class="nx">mp</span><span class="p">,</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="nx">mp</span><span class="p">.</span><span class="nx">g0</span><span class="p">.</span><span class="nx">stack</span><span class="p">.</span><span class="nx">hi</span><span class="p">))</span>
    <span class="nx">execLock</span><span class="p">.</span><span class="nf">runlock</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div><h4 id="m的状态">M的状态</h4>
<p>sched.nmspinning 保存 spinning 的 m 个数</p>
<table>
<thead>
<tr>
<th align="center">m.spinning</th>
<th>value</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">spinning</td>
<td>true</td>
<td>m is out of work and is actively looking for work</td>
</tr>
<tr>
<td align="center">unspinning</td>
<td>false</td>
<td>m is working</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby">       <span class="n">mstart</span>
          <span class="o">|</span>
          <span class="n">v</span>            <span class="err">找不到可执行任务</span><span class="p">,</span><span class="n">gc</span> <span class="no">STW</span><span class="p">,</span>
      <span class="o">+----------+</span>     <span class="err">任务执行时间过长</span><span class="p">,</span><span class="err">系统阻塞等</span>   <span class="o">+----------+</span>
      <span class="o">|</span> <span class="n">spinning</span> <span class="o">|</span> <span class="o">------------------------------&gt;</span> <span class="o">|</span><span class="n">unspinning</span><span class="o">|</span> 
      <span class="o">+----------+</span>            <span class="n">mstop</span>                <span class="o">+----------+</span>
          <span class="o">^</span>                                          <span class="o">^</span>
          <span class="o">|</span>                                          <span class="o">|</span>
      <span class="n">notewakeup</span> <span class="o">&lt;-----------------------------</span>  <span class="n">notesleep</span>
</code></pre></div><h4 id="m的问题">M的问题</h4>
<p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fgolang%2Fgo%2Fissues%2F14592">M的问题</a>
线程不会被释放，即便不用</p>
<h2 id="p的一生">P的一生</h2>
<h4 id="p的创建">P的创建</h4>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">proc.go
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Change number of processors. The world is stopped, sched is locked.
</span><span class="c1">// gcworkbufs are not being modified by either the GC or
</span><span class="c1">// the write barrier code.
</span><span class="c1">// Returns list of Ps with local work, they need to be scheduled by the caller.
</span><span class="c1">// 所有的P都在这个函数分配，不管是最开始的初始化分配，还是后期调整
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">procresize</span><span class="p">(</span><span class="nx">nprocs</span> <span class="kt">int32</span><span class="p">)</span> <span class="o">*</span><span class="nx">p</span> <span class="p">{</span>
    <span class="c1">// 默认传入的 nprocs 就是 CPU 个数，不能为 0
</span><span class="c1"></span>
    <span class="nx">old</span> <span class="o">:=</span> <span class="nx">gomaxprocs</span>
    <span class="c1">// 如果 gomaxprocs &lt;=0 抛出异常
</span><span class="c1"></span>    <span class="k">if</span> <span class="nx">old</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">nprocs</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="nf">throw</span><span class="p">(</span><span class="s">&#34;procresize: invalid arg&#34;</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="o">...</span>
    <span class="c1">// Grow allp if necessary. allp 是全局数组
</span><span class="c1"></span>    <span class="k">if</span> <span class="nx">nprocs</span> <span class="p">&gt;</span> <span class="nb">int32</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">allp</span><span class="p">))</span> <span class="p">{</span>
        <span class="c1">// Synchronize with retake, which could be running
</span><span class="c1"></span>        <span class="c1">// concurrently since it doesn&#39;t run on a P.
</span><span class="c1"></span>        <span class="nf">lock</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">allpLock</span><span class="p">)</span>
        <span class="k">if</span> <span class="nx">nprocs</span> <span class="o">&lt;=</span> <span class="nb">int32</span><span class="p">(</span><span class="nb">cap</span><span class="p">(</span><span class="nx">allp</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">allp</span> <span class="p">=</span> <span class="nx">allp</span><span class="p">[:</span><span class="nx">nprocs</span><span class="p">]</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="c1">// 分配nprocs个*p
</span><span class="c1"></span>            <span class="nx">nallp</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="o">*</span><span class="nx">p</span><span class="p">,</span> <span class="nx">nprocs</span><span class="p">)</span>
            <span class="c1">// Copy everything up to allp&#39;s cap so we
</span><span class="c1"></span>            <span class="c1">// never lose old allocated Ps.
</span><span class="c1"></span>            <span class="nb">copy</span><span class="p">(</span><span class="nx">nallp</span><span class="p">,</span> <span class="nx">allp</span><span class="p">[:</span><span class="nb">cap</span><span class="p">(</span><span class="nx">allp</span><span class="p">)])</span>
            <span class="nx">allp</span> <span class="p">=</span> <span class="nx">nallp</span>
        <span class="p">}</span>
        <span class="nf">unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">allpLock</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// initialize new P&#39;s
</span><span class="c1"></span>    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="nb">int32</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">nprocs</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">pp</span> <span class="o">:=</span> <span class="nx">allp</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
        <span class="k">if</span> <span class="nx">pp</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nx">pp</span> <span class="p">=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
            <span class="nx">pp</span><span class="p">.</span><span class="nx">id</span> <span class="p">=</span> <span class="nx">i</span>
            <span class="nx">pp</span><span class="p">.</span><span class="nx">status</span> <span class="p">=</span> <span class="nx">_Pgcstop</span>            <span class="c1">// 更改状态
</span><span class="c1"></span>            <span class="nx">pp</span><span class="p">.</span><span class="nx">sudogcache</span> <span class="p">=</span> <span class="nx">pp</span><span class="p">.</span><span class="nx">sudogbuf</span><span class="p">[:</span><span class="mi">0</span><span class="p">]</span> <span class="c1">//将sudogcache指向sudogbuf的起始地址
</span><span class="c1"></span>            <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">pp</span><span class="p">.</span><span class="nx">deferpool</span> <span class="p">{</span>
                <span class="nx">pp</span><span class="p">.</span><span class="nx">deferpool</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">pp</span><span class="p">.</span><span class="nx">deferpoolbuf</span><span class="p">[</span><span class="nx">i</span><span class="p">][:</span><span class="mi">0</span><span class="p">]</span>
            <span class="p">}</span>
            <span class="nx">pp</span><span class="p">.</span><span class="nx">wbBuf</span><span class="p">.</span><span class="nf">reset</span><span class="p">()</span>
            <span class="c1">// 将pp保存到allp数组里, 下面这行代码等价于 allp[i] = pp
</span><span class="c1"></span>            <span class="nf">atomicstorep</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">allp</span><span class="p">[</span><span class="nx">i</span><span class="p">]),</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="nx">pp</span><span class="p">))</span>
        <span class="p">}</span>
        <span class="o">...</span>
    <span class="p">}</span>
  <span class="o">...</span>

    <span class="nx">_g_</span> <span class="o">:=</span> <span class="nf">getg</span><span class="p">()</span>
    <span class="c1">// 如果当前的M已经绑定P，继续使用，否则将当前的M绑定一个P
</span><span class="c1"></span>    <span class="k">if</span> <span class="nx">_g_</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">p</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">_g_</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nf">ptr</span><span class="p">().</span><span class="nx">id</span> <span class="p">&lt;</span> <span class="nx">nprocs</span> <span class="p">{</span>
        <span class="c1">// continue to use the current P
</span><span class="c1"></span>        <span class="nx">_g_</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nf">ptr</span><span class="p">().</span><span class="nx">status</span> <span class="p">=</span> <span class="nx">_Prunning</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// release the current P and acquire allp[0]
</span><span class="c1"></span>        <span class="c1">// 获取allp[0]
</span><span class="c1"></span>        <span class="k">if</span> <span class="nx">_g_</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">p</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="nx">_g_</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nf">ptr</span><span class="p">().</span><span class="nx">m</span> <span class="p">=</span> <span class="mi">0</span>
        <span class="p">}</span>
        <span class="nx">_g_</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">p</span> <span class="p">=</span> <span class="mi">0</span>
        <span class="nx">_g_</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">mcache</span> <span class="p">=</span> <span class="kc">nil</span>
        <span class="nx">p</span> <span class="o">:=</span> <span class="nx">allp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="nx">p</span><span class="p">.</span><span class="nx">m</span> <span class="p">=</span> <span class="mi">0</span>
        <span class="nx">p</span><span class="p">.</span><span class="nx">status</span> <span class="p">=</span> <span class="nx">_Pidle</span>
        <span class="c1">// 将当前的m和p绑定
</span><span class="c1"></span>        <span class="nf">acquirep</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
        <span class="k">if</span> <span class="nx">trace</span><span class="p">.</span><span class="nx">enabled</span> <span class="p">{</span>
            <span class="nf">traceGoStart</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="kd">var</span> <span class="nx">runnablePs</span> <span class="o">*</span><span class="nx">p</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="nx">nprocs</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span> <span class="p">{</span>
        <span class="nx">p</span> <span class="o">:=</span> <span class="nx">allp</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
        <span class="k">if</span> <span class="nx">_g_</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nf">ptr</span><span class="p">()</span> <span class="o">==</span> <span class="nx">p</span> <span class="p">{</span>
            <span class="k">continue</span>
        <span class="p">}</span>
        <span class="nx">p</span><span class="p">.</span><span class="nx">status</span> <span class="p">=</span> <span class="nx">_Pidle</span>
        <span class="c1">// 判断当前的 p 是不是被绑定
</span><span class="c1"></span>        <span class="k">if</span> <span class="nf">runqempty</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 将空闲p放入空闲链表
</span><span class="c1"></span>            <span class="nf">pidleput</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">p</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="nf">mget</span><span class="p">())</span>
            <span class="nx">p</span><span class="p">.</span><span class="nx">link</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="nx">runnablePs</span><span class="p">)</span>
            <span class="nx">runnablePs</span> <span class="p">=</span> <span class="nx">p</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">stealOrder</span><span class="p">.</span><span class="nf">reset</span><span class="p">(</span><span class="nb">uint32</span><span class="p">(</span><span class="nx">nprocs</span><span class="p">))</span>
    <span class="kd">var</span> <span class="nx">int32p</span> <span class="o">*</span><span class="kt">int32</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">gomaxprocs</span> <span class="c1">// make compiler check that gomaxprocs is an int32
</span><span class="c1"></span>    <span class="nx">atomic</span><span class="p">.</span><span class="nf">Store</span><span class="p">((</span><span class="o">*</span><span class="kt">uint32</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="nx">int32p</span><span class="p">)),</span> <span class="nb">uint32</span><span class="p">(</span><span class="nx">nprocs</span><span class="p">))</span>
    <span class="k">return</span> <span class="nx">runnablePs</span>
<span class="p">}</span>
</code></pre></div><p>所有的P在程序启动的时候就设置好了，并用一个allp slice维护，可以调用runtime.GOMAXPROCS调整P的个数，虽然代价很大（会停止世界 stopTheWorld，里面会 stop go）</p>
<h4 id="p的状态">P的状态</h4>
<p><code>runtime2.go</code>中的全局变量 <em>allp</em> 存储所有可以拿到的 p
<em>sched.pidle</em> 存储所有的空闲的 P，是 P 的空闲队列（链表，sched.pidle存储一个p指针，p.link存储下一个p指针）</p>
<p><strong>P被放入空闲队列(<code>pidleput(p)</code>)的情况：</strong></p>
<ol>
<li>执行完成当前g，在调度过程中，窃取不到其他的g，则会被加入空闲队列（<code>schedule()</code>函数中查找本地队列无可用g，调用<code>findrunnable()</code>函数，仍找不到g，则调用 <code>pidleput(p)</code>）
<code>findrunnable()</code>：本地队列获取g→全局队列获取g→从netpoll获取→其他p处偷g（一般从队列偷一半，如果偷不到，则尝试偷从其他p的 p.runnext 偷取）</li>
<li>m退出，m和p解绑，并将p加入空闲队列（<code>handoff(release(p))</code>函数中调用 <code>pidleput(p)</code>）</li>
<li>修改了<em>GOMAXPROCS</em>后，世界停止，调度停止。（<code>procresize(nprocs)</code>函数中调用 <code>pidleput(p)</code>）
如果<em>GOMAXPROCS</em>减小，则多余的p进入 _Pdead；
如果<em>GOMAXPROCS</em>增大，则创建缺少的 p；
对于所有即将使用的 p （修改后的<em>GOMAXPROCS</em>个p），本地队列没有 go 任务的 p ，加入空闲队列</li>
</ol>
<p>见<code>runtime2.go</code></p>
<table>
<thead>
<tr>
<th align="center">p.status</th>
<th align="center">value</th>
<th align="center">执行用户代码</th>
<th align="center">位于空闲队列</th>
<th align="center">分配了M</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">_Pidle</td>
<td align="center">0</td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>√</code></strong></td>
<td align="center"><strong><code>○</code></strong></td>
<td align="left">P没有被用来执行用户代码，也没有被调度，而是被放在 the idle P list，可以被调度器获取。也可能只是在状态转换的中间过程中</td>
</tr>
<tr>
<td align="center">_Prunning</td>
<td align="center">1</td>
<td align="center"><strong><code>√</code></strong></td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>√</code></strong></td>
<td align="left">P被一个M所拥有，用来运行用户代码或者调度器，只有拥有该P的M能够从这个状态修改为其他状态（比如转化为：_Pidle-没有工作需要做；_Psyscall-进入一个系统调用；_Pgcstop-停下来执行gc）。M也可以将P交给其他的M（比如调度一个加锁的G）</td>
</tr>
<tr>
<td align="center">_Psyscall</td>
<td align="center">2</td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>√</code></strong></td>
<td align="left">P没有运行用户代码。 它与系统调用中的M绑定，但不属于它，并且可能被另一个M窃取。这类似于_Pidle，但使用轻量级的状态转换，同时与M绑定。离开_Psyscall 必须与CAS（atomic.Cas 原子操作的状态转换函数）一起调用，以窃取或重新获得P。请注意，这存在ABA危险：即使M在syscall后成功将其原始P返回_Prunning状态，它也必须了解P可能在此期间已被另一个M使用 。</td>
</tr>
<tr>
<td align="center">_Pgcstop</td>
<td align="center">3</td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>○</code></strong></td>
<td align="left">执行 stopTheWorld()（位于proc.go，用于暂停所有的G，简称STW） 时暂停P，由 STW的M拥有。STW的M甚至在_Pgcstop中也继续使用其P。 从_Prunning过渡到_Pgcstop会导致M释放其P并停放。P保留其运行队列，startTheWorld将在具有非空运行队列的Ps上重新启动调度程序 schedule()。</td>
</tr>
<tr>
<td align="center">_Pdead</td>
<td align="center">4</td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>×</code></strong></td>
<td align="left">P不再被使用，而被放入空闲队列（GOMAXPROCS缩小）。如果GOMAXPROCS增加，我们将重用P。一个死掉的P被剥夺了其大部分资源，尽管还剩下一些东西（例如，跟踪缓冲区）。</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby">                                             <span class="n">acquirep</span><span class="p">(</span><span class="nb">p</span><span class="p">)</span>        
                          <span class="err">不需要使用的</span><span class="n">P</span>       <span class="no">P和M绑定的时候</span>       <span class="err">进入系统调用</span>       <span class="n">procresize</span><span class="p">()</span>
<span class="kp">new</span><span class="p">(</span><span class="nb">p</span><span class="p">)</span>  <span class="o">-----+</span>        <span class="o">+---------------+</span>     <span class="o">+-----------+</span>     <span class="o">+------------+</span>    <span class="o">+----------+</span>
            <span class="o">|</span>         <span class="o">|</span>               <span class="o">|</span>     <span class="o">|</span>           <span class="o">|</span>     <span class="o">|</span>            <span class="o">|</span>    <span class="o">|</span>          <span class="o">|</span>
            <span class="o">|</span>   <span class="o">+------------+</span>    <span class="o">+---</span><span class="n">v</span><span class="o">--------+</span>    <span class="o">+---</span><span class="n">v</span><span class="o">--------+</span>    <span class="o">+----</span><span class="n">v</span><span class="o">-------+</span>    <span class="o">+--</span><span class="n">v</span><span class="o">---------+</span>
            <span class="o">+--&gt;|</span>  <span class="n">_Pgcstop</span>  <span class="o">|</span>    <span class="o">|</span>    <span class="n">_Pidle</span>  <span class="o">|</span>    <span class="o">|</span>  <span class="n">_Prunning</span> <span class="o">|</span>    <span class="o">|</span>  <span class="n">_Psyscall</span> <span class="o">|</span>    <span class="o">|</span>   <span class="n">_Pdead</span>   <span class="o">|</span>
                <span class="o">+------^-----+</span>    <span class="o">+--------^---+</span>    <span class="o">+--------^---+</span>    <span class="o">+------------+</span>    <span class="o">+------------+</span>
                       <span class="o">|</span>            <span class="o">|</span>     <span class="o">|</span>            <span class="o">|</span>     <span class="o">|</span>            <span class="o">|</span>
                       <span class="o">+------------+</span>     <span class="o">+------------+</span>     <span class="o">+------------+</span>
                           <span class="no">GC结束</span>            <span class="n">releasep</span><span class="p">()</span>        <span class="err">退出系统调用</span>
                                             <span class="no">P和M解绑</span>                      
</code></pre></div><p>P的数量默认等于cpu的个数，很多人认为runtime.GOMAXPROCS可以限制系统线程的数量，但这是错误的，M是按需创建的，和runtime.GOMAXPROCS没有关系。
如果一开始runtime.GOMAXPROCS=10，之后修改成5，那么有5个P不允许使用，那么这些P进入_Pdead 状态。如果再次调整runtime.GOMAXPROCS=10，就会改状态为 _Pgcstop</p>
<h2 id="g的一生">G的一生</h2>
<h4 id="g的创建">G的创建</h4>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">proc.go
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Create a new g running fn with siz bytes of arguments.
</span><span class="c1">// Put it on the queue of g&#39;s waiting to run.
</span><span class="c1">// The compiler turns a go statement into a call to this.
</span><span class="c1">// Cannot split the stack because it assumes that the arguments
</span><span class="c1">// are available sequentially after &amp;fn; they would not be
</span><span class="c1">// copied if a stack split occurred.
</span><span class="c1">//go:nosplit
</span><span class="c1">// 新建一个goroutine，
</span><span class="c1">// 用fn + PtrSize 获取第一个参数的地址，也就是argp
</span><span class="c1">// 用siz - 8 获取pc地址
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">newproc</span><span class="p">(</span><span class="nx">siz</span> <span class="kt">int32</span><span class="p">,</span> <span class="nx">fn</span> <span class="o">*</span><span class="nx">funcval</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">argp</span> <span class="o">:=</span> <span class="nf">add</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">fn</span><span class="p">),</span> <span class="nx">sys</span><span class="p">.</span><span class="nx">PtrSize</span><span class="p">)</span>
    <span class="nx">pc</span> <span class="o">:=</span> <span class="nf">getcallerpc</span><span class="p">()</span>
    <span class="c1">// 用g0的栈创建G对象
</span><span class="c1"></span>    <span class="nf">systemstack</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// 真正创建
</span><span class="c1"></span>        <span class="nf">newproc1</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="p">(</span><span class="o">*</span><span class="kt">uint8</span><span class="p">)(</span><span class="nx">argp</span><span class="p">),</span> <span class="nx">siz</span><span class="p">,</span> <span class="nx">pc</span><span class="p">)</span>
    <span class="p">})</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Create a new g running fn with narg bytes of arguments starting
</span><span class="c1">// at argp. callerpc is the address of the go statement that created
</span><span class="c1">// this. The new g is put on the queue of g&#39;s waiting to run.
</span><span class="c1">// 根据函数参数和函数地址，创建一个新的G，然后将这个G加入队列等待运行
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">newproc1</span><span class="p">(</span><span class="nx">fn</span> <span class="o">*</span><span class="nx">funcval</span><span class="p">,</span> <span class="nx">argp</span> <span class="o">*</span><span class="kt">uint8</span><span class="p">,</span> <span class="nx">narg</span> <span class="kt">int32</span><span class="p">,</span> <span class="nx">callerpc</span> <span class="kt">uintptr</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 获取当前g
</span><span class="c1"></span>    <span class="nx">_g_</span> <span class="o">:=</span> <span class="nf">getg</span><span class="p">()</span>

    <span class="k">if</span> <span class="nx">fn</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">_g_</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">throwing</span> <span class="p">=</span> <span class="o">-</span><span class="mi">1</span> <span class="c1">// do not dump full stacks
</span><span class="c1"></span>        <span class="nf">throw</span><span class="p">(</span><span class="s">&#34;go of nil func value&#34;</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">_g_</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">locks</span><span class="o">++</span> <span class="c1">// disable preemption because it can be holding p in a local var
</span><span class="c1"></span>    <span class="nx">siz</span> <span class="o">:=</span> <span class="nx">narg</span>
    <span class="nx">siz</span> <span class="p">=</span> <span class="p">(</span><span class="nx">siz</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span> <span class="o">&amp;^</span> <span class="mi">7</span>

    <span class="c1">// We could allocate a larger initial stack if necessary.
</span><span class="c1"></span>    <span class="c1">// Not worth it: this is almost always an error.
</span><span class="c1"></span>    <span class="c1">// 4*sizeof(uintreg): extra space added below
</span><span class="c1"></span>    <span class="c1">// sizeof(uintreg): caller&#39;s LR (arm) or return address (x86, in gostartcall).
</span><span class="c1"></span>    <span class="c1">// 如果函数的参数大小比2048大的话，直接panic
</span><span class="c1"></span>    <span class="c1">// 这里的sys.RegSize是根据系统会有区别的，比如64位就是8字节，32位就是4字节
</span><span class="c1"></span>    <span class="k">if</span> <span class="nx">siz</span> <span class="o">&gt;=</span> <span class="nx">_StackMin</span><span class="o">-</span><span class="mi">4</span><span class="o">*</span><span class="nx">sys</span><span class="p">.</span><span class="nx">RegSize</span><span class="o">-</span><span class="nx">sys</span><span class="p">.</span><span class="nx">RegSize</span> <span class="p">{</span>
        <span class="nf">throw</span><span class="p">(</span><span class="s">&#34;newproc: function arguments too large for new goroutine&#34;</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// 从当前g的m中获取p
</span><span class="c1"></span>    <span class="nx">_p_</span> <span class="o">:=</span> <span class="nx">_g_</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">p</span><span class="p">.</span><span class="nf">ptr</span><span class="p">()</span>
    <span class="c1">// 从gfree list获取g
</span><span class="c1"></span>    <span class="nx">newg</span> <span class="o">:=</span> <span class="nf">gfget</span><span class="p">(</span><span class="nx">_p_</span><span class="p">)</span>
    <span class="c1">// 如果没获取到g，则新建一个
</span><span class="c1"></span>    <span class="k">if</span> <span class="nx">newg</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">newg</span> <span class="p">=</span> <span class="nf">malg</span><span class="p">(</span><span class="nx">_StackMin</span><span class="p">)</span>
        <span class="nf">casgstatus</span><span class="p">(</span><span class="nx">newg</span><span class="p">,</span> <span class="nx">_Gidle</span><span class="p">,</span> <span class="nx">_Gdead</span><span class="p">)</span> <span class="c1">//将g的状态改为_Gdead
</span><span class="c1"></span>        <span class="c1">// 添加到allg数组，防止gc扫描清除掉
</span><span class="c1"></span>        <span class="nf">allgadd</span><span class="p">(</span><span class="nx">newg</span><span class="p">)</span> <span class="c1">// publishes with a g-&gt;status of Gdead so GC scanner doesn&#39;t look at uninitialized stack.
</span><span class="c1"></span>    <span class="p">}</span>
    <span class="k">if</span> <span class="nx">newg</span><span class="p">.</span><span class="nx">stack</span><span class="p">.</span><span class="nx">hi</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="nf">throw</span><span class="p">(</span><span class="s">&#34;newproc1: newg missing stack&#34;</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="nf">readgstatus</span><span class="p">(</span><span class="nx">newg</span><span class="p">)</span> <span class="o">!=</span> <span class="nx">_Gdead</span> <span class="p">{</span>
        <span class="nf">throw</span><span class="p">(</span><span class="s">&#34;newproc1: new g is not Gdead&#34;</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="nx">totalSize</span> <span class="o">:=</span> <span class="mi">4</span><span class="o">*</span><span class="nx">sys</span><span class="p">.</span><span class="nx">RegSize</span> <span class="o">+</span> <span class="nb">uintptr</span><span class="p">(</span><span class="nx">siz</span><span class="p">)</span> <span class="o">+</span> <span class="nx">sys</span><span class="p">.</span><span class="nx">MinFrameSize</span> <span class="c1">// extra space in case of reads slightly beyond frame
</span><span class="c1"></span>    <span class="nx">totalSize</span> <span class="o">+=</span> <span class="o">-</span><span class="nx">totalSize</span> <span class="o">&amp;</span> <span class="p">(</span><span class="nx">sys</span><span class="p">.</span><span class="nx">SpAlign</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>                  <span class="c1">// align to spAlign
</span><span class="c1"></span>    <span class="nx">sp</span> <span class="o">:=</span> <span class="nx">newg</span><span class="p">.</span><span class="nx">stack</span><span class="p">.</span><span class="nx">hi</span> <span class="o">-</span> <span class="nx">totalSize</span>
    <span class="nx">spArg</span> <span class="o">:=</span> <span class="nx">sp</span>
    <span class="k">if</span> <span class="nx">usesLR</span> <span class="p">{</span>
        <span class="c1">// caller&#39;s LR
</span><span class="c1"></span>        <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="kt">uintptr</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="nx">sp</span><span class="p">))</span> <span class="p">=</span> <span class="mi">0</span>
        <span class="nf">prepGoExitFrame</span><span class="p">(</span><span class="nx">sp</span><span class="p">)</span>
        <span class="nx">spArg</span> <span class="o">+=</span> <span class="nx">sys</span><span class="p">.</span><span class="nx">MinFrameSize</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="nx">narg</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="c1">// copy参数
</span><span class="c1"></span>        <span class="nf">memmove</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="nx">spArg</span><span class="p">),</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="nx">argp</span><span class="p">),</span> <span class="nb">uintptr</span><span class="p">(</span><span class="nx">narg</span><span class="p">))</span>
        <span class="c1">// This is a stack-to-stack copy. If write barriers
</span><span class="c1"></span>        <span class="c1">// are enabled and the source stack is grey (the
</span><span class="c1"></span>        <span class="c1">// destination is always black), then perform a
</span><span class="c1"></span>        <span class="c1">// barrier copy. We do this *after* the memmove
</span><span class="c1"></span>        <span class="c1">// because the destination stack may have garbage on
</span><span class="c1"></span>        <span class="c1">// it.
</span><span class="c1"></span>        <span class="k">if</span> <span class="nx">writeBarrier</span><span class="p">.</span><span class="nx">needed</span> <span class="o">&amp;&amp;</span> <span class="p">!</span><span class="nx">_g_</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">curg</span><span class="p">.</span><span class="nx">gcscandone</span> <span class="p">{</span>
            <span class="nx">f</span> <span class="o">:=</span> <span class="nf">findfunc</span><span class="p">(</span><span class="nx">fn</span><span class="p">.</span><span class="nx">fn</span><span class="p">)</span>
            <span class="nx">stkmap</span> <span class="o">:=</span> <span class="p">(</span><span class="o">*</span><span class="nx">stackmap</span><span class="p">)(</span><span class="nf">funcdata</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="nx">_FUNCDATA_ArgsPointerMaps</span><span class="p">))</span>
            <span class="c1">// We&#39;re in the prologue, so it&#39;s always stack map index 0.
</span><span class="c1"></span>            <span class="nx">bv</span> <span class="o">:=</span> <span class="nf">stackmapdata</span><span class="p">(</span><span class="nx">stkmap</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
            <span class="nf">bulkBarrierBitmap</span><span class="p">(</span><span class="nx">spArg</span><span class="p">,</span> <span class="nx">spArg</span><span class="p">,</span> <span class="nb">uintptr</span><span class="p">(</span><span class="nx">narg</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">bv</span><span class="p">.</span><span class="nx">bytedata</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nf">memclrNoHeapPointers</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">newg</span><span class="p">.</span><span class="nx">sched</span><span class="p">),</span> <span class="nx">unsafe</span><span class="p">.</span><span class="nf">Sizeof</span><span class="p">(</span><span class="nx">newg</span><span class="p">.</span><span class="nx">sched</span><span class="p">))</span>
    <span class="c1">// 下面是对新创建好的g设置各种参数，之后的调度就是根据参数走的
</span><span class="c1"></span>    <span class="nx">newg</span><span class="p">.</span><span class="nx">sched</span><span class="p">.</span><span class="nx">sp</span> <span class="p">=</span> <span class="nx">sp</span>
    <span class="nx">newg</span><span class="p">.</span><span class="nx">stktopsp</span> <span class="p">=</span> <span class="nx">sp</span>
    <span class="c1">// 保存goexit的地址到sched.pc
</span><span class="c1"></span>    <span class="nx">newg</span><span class="p">.</span><span class="nx">sched</span><span class="p">.</span><span class="nx">pc</span> <span class="p">=</span> <span class="nf">funcPC</span><span class="p">(</span><span class="nx">goexit</span><span class="p">)</span> <span class="o">+</span> <span class="nx">sys</span><span class="p">.</span><span class="nx">PCQuantum</span> <span class="c1">// +PCQuantum so that previous instruction is in same function
</span><span class="c1"></span>    <span class="nx">newg</span><span class="p">.</span><span class="nx">sched</span><span class="p">.</span><span class="nx">g</span> <span class="p">=</span> <span class="nf">guintptr</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="nx">newg</span><span class="p">))</span>
    <span class="nf">gostartcallfn</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">newg</span><span class="p">.</span><span class="nx">sched</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span>
    <span class="nx">newg</span><span class="p">.</span><span class="nx">gopc</span> <span class="p">=</span> <span class="nx">callerpc</span>
    <span class="nx">newg</span><span class="p">.</span><span class="nx">startpc</span> <span class="p">=</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">fn</span>
    <span class="k">if</span> <span class="nx">_g_</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">curg</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">newg</span><span class="p">.</span><span class="nx">labels</span> <span class="p">=</span> <span class="nx">_g_</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">curg</span><span class="p">.</span><span class="nx">labels</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="nf">isSystemGoroutine</span><span class="p">(</span><span class="nx">newg</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">atomic</span><span class="p">.</span><span class="nf">Xadd</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">sched</span><span class="p">.</span><span class="nx">ngsys</span><span class="p">,</span> <span class="o">+</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">newg</span><span class="p">.</span><span class="nx">gcscanvalid</span> <span class="p">=</span> <span class="kc">false</span>
    <span class="c1">// 更改当前g的状态为_Grunnable
</span><span class="c1"></span>    <span class="nf">casgstatus</span><span class="p">(</span><span class="nx">newg</span><span class="p">,</span> <span class="nx">_Gdead</span><span class="p">,</span> <span class="nx">_Grunnable</span><span class="p">)</span>

    <span class="c1">// 生成唯一的goid
</span><span class="c1"></span>    <span class="k">if</span> <span class="nx">_p_</span><span class="p">.</span><span class="nx">goidcache</span> <span class="o">==</span> <span class="nx">_p_</span><span class="p">.</span><span class="nx">goidcacheend</span> <span class="p">{</span>
        <span class="c1">// Sched.goidgen is the last allocated id,
</span><span class="c1"></span>        <span class="c1">// this batch must be [sched.goidgen+1, sched.goidgen+GoidCacheBatch].
</span><span class="c1"></span>        <span class="c1">// At startup sched.goidgen=0, so main goroutine receives goid=1.
</span><span class="c1"></span>        <span class="nx">_p_</span><span class="p">.</span><span class="nx">goidcache</span> <span class="p">=</span> <span class="nx">atomic</span><span class="p">.</span><span class="nf">Xadd64</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">sched</span><span class="p">.</span><span class="nx">goidgen</span><span class="p">,</span> <span class="nx">_GoidCacheBatch</span><span class="p">)</span>
        <span class="nx">_p_</span><span class="p">.</span><span class="nx">goidcache</span> <span class="o">-=</span> <span class="nx">_GoidCacheBatch</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="nx">_p_</span><span class="p">.</span><span class="nx">goidcacheend</span> <span class="p">=</span> <span class="nx">_p_</span><span class="p">.</span><span class="nx">goidcache</span> <span class="o">+</span> <span class="nx">_GoidCacheBatch</span>
    <span class="p">}</span>
    <span class="c1">// 分配给g
</span><span class="c1"></span>    <span class="nx">newg</span><span class="p">.</span><span class="nx">goid</span> <span class="p">=</span> <span class="nb">int64</span><span class="p">(</span><span class="nx">_p_</span><span class="p">.</span><span class="nx">goidcache</span><span class="p">)</span>
    <span class="nx">_p_</span><span class="p">.</span><span class="nx">goidcache</span><span class="o">++</span>
    <span class="k">if</span> <span class="nx">raceenabled</span> <span class="p">{</span>
        <span class="nx">newg</span><span class="p">.</span><span class="nx">racectx</span> <span class="p">=</span> <span class="nf">racegostart</span><span class="p">(</span><span class="nx">callerpc</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="nx">trace</span><span class="p">.</span><span class="nx">enabled</span> <span class="p">{</span>
        <span class="nf">traceGoCreate</span><span class="p">(</span><span class="nx">newg</span><span class="p">,</span> <span class="nx">newg</span><span class="p">.</span><span class="nx">startpc</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="c1">// 将当前新生成的g，放入p的队列；p是从当前的g的m中获取的；如果队列没满就放在本地队列，否则会放入全局队列
</span><span class="c1"></span>    <span class="nf">runqput</span><span class="p">(</span><span class="nx">_p_</span><span class="p">,</span> <span class="nx">newg</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>

    <span class="c1">// 如果有空闲的p 且 m没有处于自旋状态 且 main goroutine已经启动，那么唤醒某个m来执行任务
</span><span class="c1"></span>    <span class="k">if</span> <span class="nx">atomic</span><span class="p">.</span><span class="nf">Load</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">sched</span><span class="p">.</span><span class="nx">npidle</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">atomic</span><span class="p">.</span><span class="nf">Load</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">sched</span><span class="p">.</span><span class="nx">nmspinning</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">mainStarted</span> <span class="p">{</span>
        <span class="nf">wakep</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="nx">_g_</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">locks</span><span class="o">--</span>
    <span class="k">if</span> <span class="nx">_g_</span><span class="p">.</span><span class="nx">m</span><span class="p">.</span><span class="nx">locks</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">_g_</span><span class="p">.</span><span class="nx">preempt</span> <span class="p">{</span> <span class="c1">// restore the preemption request in case we&#39;ve cleared it in newstack
</span><span class="c1"></span>        <span class="nx">_g_</span><span class="p">.</span><span class="nx">stackguard0</span> <span class="p">=</span> <span class="nx">stackPreempt</span>
    <span class="p">}</span>
<span class="p">}</span> 
</code></pre></div><h4 id="g的状态">G的状态</h4>
<p>见<code>runtime2.go</code></p>
<table>
<thead>
<tr>
<th align="center">g.atomicstatus</th>
<th align="center">value</th>
<th align="center">执行用户代码</th>
<th align="center">位于运行队列</th>
<th align="center">拥有栈</th>
<th align="center">分配了M</th>
<th align="center">分配了 P</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">_Gidle</td>
<td align="center">0</td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>×</code></strong></td>
<td align="left">分配了空间，但是并未被初始化</td>
</tr>
<tr>
<td align="center">_Grunnable</td>
<td align="center">1</td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>√</code></strong></td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"></td>
<td align="center"></td>
<td align="left">goroutine在运行队列（run queue），但是并没有执行用户代码，没有享有栈</td>
</tr>
<tr>
<td align="center">_Grunning</td>
<td align="center">2</td>
<td align="center"><strong><code>○</code></strong></td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>√</code></strong></td>
<td align="center"><strong><code>√</code></strong></td>
<td align="center"><strong><code>√</code></strong></td>
<td align="left">goroutine可能在执行用户代码（或者做一些其他操作），其拥有栈，不在运行队列，被分配了一个M和一个P</td>
</tr>
<tr>
<td align="center">_Gsyscall</td>
<td align="center">3</td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>√</code></strong></td>
<td align="center"><strong><code>√</code></strong></td>
<td align="center"></td>
<td align="left">goroutine正在执行一个系统调用，并没有在执行用户代码，拥有栈，不在运行队列，被分配了一个M</td>
</tr>
<tr>
<td align="center">_Gwaiting</td>
<td align="center">4</td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"></td>
<td align="center"></td>
<td align="left">在运行时被阻塞，并没有在执行用户代码，不在运行队列，但是会在某个地方被记录（比如 channel wait queue），所以在条件允许后会调用 ready() 进入 _Grunnable 状态，并放在运行队列。 <strong>除</strong>通道操作可以在适当的通道锁下读取或写入堆栈的某些部分外，不拥有该堆栈。故在goroutine输入_Gwaiting之后访问堆栈是不安全的</td>
</tr>
<tr>
<td align="center">_Gmoribund_unused</td>
<td align="center">5</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="left">当前未使用，但在gdb脚本中进行了硬编码</td>
</tr>
<tr>
<td align="center">_Gdead</td>
<td align="center">6</td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>○</code></strong></td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>×</code></strong></td>
<td align="left">goroutine当前未被使用，可能直接退出了，在空闲列表中，或者是仅仅被初始化完成，没有执行用户代码，可能拥有或者不拥有堆栈，G和其堆栈被M所拥有，当前的M正在exiting G或者将G从空闲队列拿出来</td>
</tr>
<tr>
<td align="center">_Genqueue_unused</td>
<td align="center">7</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="left">当前未被使用</td>
</tr>
<tr>
<td align="center">_Gcopystack</td>
<td align="center">8</td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"></td>
<td align="center"></td>
<td align="left">goroutine的堆栈正在被移动。未在执行用户代码，不在运行队列，堆栈被将其置为 _Gcopystack 状态的goroutine所拥有</td>
</tr>
<tr>
<td align="center">_Gpreempted</td>
<td align="center">9</td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"><strong><code>×</code></strong></td>
<td align="center"></td>
<td align="center"></td>
<td align="left">goroutine停下来从而被一个suspendG抢占，类似 _Gwaiting 状态，但是没有地方负责 ready() 它。一些 suspendG 必须改变状态至 _Gwaiting 来负责调用本G的 ready()</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre class="chroma"><code class="language-ruby" data-lang="ruby">                               <span class="o">--------------------------------------------------------</span>
                               <span class="o">|</span>                      <span class="o">+------------+</span>                  <span class="o">|</span>
                               <span class="o">|</span>      <span class="n">ready</span>           <span class="o">|</span>            <span class="o">|</span>                  <span class="o">|</span>
                               <span class="o">|</span>  <span class="o">+------------------</span> <span class="o">|</span>  <span class="n">_Gwaiting</span> <span class="o">|</span>                  <span class="o">|</span>
                               <span class="o">|</span>  <span class="o">|</span>                   <span class="o">|</span>            <span class="o">|</span>                  <span class="o">|</span> <span class="n">newproc</span>
                               <span class="o">|</span>  <span class="o">|</span>                   <span class="o">+------------+</span>                  <span class="o">|</span>
                               <span class="o">|</span>  <span class="o">|</span>                         <span class="o">^</span> <span class="n">park_m</span>                  <span class="o">|</span>
                               <span class="n">V</span>  <span class="n">V</span>                         <span class="o">|</span>                         <span class="o">|</span>
  <span class="o">+------------+</span>            <span class="o">+------------+</span>  <span class="n">execute</span>   <span class="o">+------------+</span>            <span class="o">+------------+</span>    
  <span class="o">|</span>            <span class="o">|</span>  <span class="n">newproc</span>   <span class="o">|</span>            <span class="o">|</span> <span class="o">---------&gt;</span> <span class="o">|</span>            <span class="o">|</span>   <span class="n">goexit</span>   <span class="o">|</span>            <span class="o">|</span>
  <span class="o">|</span>  <span class="n">_Gidle</span>    <span class="o">|</span> <span class="o">---------&gt;</span> <span class="o">|</span> <span class="n">_Grunnable</span> <span class="o">|</span>  <span class="k">yield</span>     <span class="o">|</span> <span class="n">_Grunning</span>  <span class="o">|</span> <span class="o">---------&gt;</span> <span class="o">|</span>   <span class="n">_Gdead</span>   <span class="o">|</span>      
  <span class="o">|</span>            <span class="o">|</span>            <span class="o">|</span>            <span class="o">|</span> <span class="o">&lt;---------</span> <span class="o">|</span>            <span class="o">|</span>            <span class="o">|</span>            <span class="o">|</span>
  <span class="o">+------------+</span>            <span class="o">+-----^------+</span>            <span class="o">+------------+</span>            <span class="o">+------------+</span>
                                  <span class="o">|</span>         <span class="n">entersyscall</span> <span class="o">|</span>      <span class="o">^</span> 
                                  <span class="o">|</span>                      <span class="n">V</span>      <span class="o">|</span> <span class="n">existsyscall</span>
                                  <span class="o">|</span>                   <span class="o">+------------+</span>
                                  <span class="o">|</span>   <span class="n">existsyscall</span>    <span class="o">|</span>            <span class="o">|</span>
                                  <span class="o">+------------------</span> <span class="o">|</span>  <span class="n">_Gsyscall</span> <span class="o">|</span>
                                                      <span class="o">|</span>            <span class="o">|</span>
                                                      <span class="o">+------------+</span>
</code></pre></div><p>最开始是初始化值：0，就是 _Gidle 状态
新建的G都是_Grunnable的，新建G的时候优先从gfree list从获取G，这样可以复用G，所以上图的状态不是完整的，_Gdead通过newproc会变为_Grunnable， 通过go func()的语法新建的G，并不是直接运行，而是放入可运行的队列中，并不能决定其什么时候运行，而是靠调度系统去自发的运行。
_Gdead 也可能直接变为 _Grunnable，比如上面的代码<code>从gfree list获取g</code> <code>newg := gfget(_p_)</code>的时候，可能拿到的就是 _Gdead 状态的g，之后<code>更改当前g的状态为_Grunnable</code> <code>casgstatus(newg, _Gdead, _Grunnable)</code></p>
<h1 id="问题">问题</h1>
<hr>
<p>看源码的时候，有可能出现只有声明但是没有函数体的函数情况，大致以下三种：</p>
<ol>
<li><strong>函数体是汇编代码写的</strong></li>
<li><strong>利用编译指示，来获取真正的函数body，link的本质是把函数的名字link到当前的声明里面</strong>
比如函数上面写了 go:xxx xxx为 nickname</li>
<li><strong>由编译器帮忙重写</strong>
汇编代码和代码里面都是看不到实现方式的，相当于代码逻辑都在编译器里面
比如 runtime.getg()</li>
</ol>
<p>作者：ChaunhewieTian
链接：https://www.jianshu.com/p/bf46cee74f76
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
		</item>
		
		<item>
			<title>The &#34;figure&#34; Shortcode</title>
			<link>https://blog.glc.im/posts/backup/the-figure-shortcode/</link>
			<pubDate>Mon, 24 Dec 2018 12:29:41 +0800</pubDate>
			
			<guid>https://blog.glc.im/posts/backup/the-figure-shortcode/</guid>
			<description>Hugo has figure shortcode built in, so you can easily add figcaptions or hyperlink rel attributes to images. Documentations can be found here:
https://gohugo.io/content-management/shortcodes/#figure
This theme has 3 CSS classes made for figure elements:
 big: images will break the width limit of main content area. left: images will float to the left. right: images will float to the right.  If a figure has no class set, the image will behave just like a normal markdown image: !</description>
			<content type="html"><![CDATA[<p>Hugo has <code>figure</code> shortcode built in, so you can easily add figcaptions or hyperlink rel attributes to images. Documentations can be found here:</p>
<p><a href="https://gohugo.io/content-management/shortcodes/#figure">https://gohugo.io/content-management/shortcodes/#figure</a></p>
<p>This theme has 3 CSS classes made for figure elements:</p>
<ul>
<li><code>big</code>: images will break the width limit of main content area.</li>
<li><code>left</code>: images will float to the left.</li>
<li><code>right</code>: images will float to the right.</li>
</ul>
<p>If a figure has no class set, the image will behave just like a normal markdown image: <code>![]()</code>.</p>
<p>Here&rsquo;s some examples, please be aware that these styles only take effect when the page width is over 1300px.</p>
<figure>
    <img src="https://via.placeholder.com/1600x800"
         alt="image"/> <figcaption>
            <p>figure-normal (without any classes)</p>
        </figcaption>
</figure>

<p>Pellentesque posuere sem nec nunc varius, id hendrerit arcu consequat. Maecenas commodo, sapien ut gravida porttitor, dolor risus facilisis enim, eget pharetra nibh nisl porttitor sapien. Proin finibus elementum ligula sit amet hendrerit. Praesent et erat sodales ante accumsan pharetra non eu nulla. Sed vehicula consequat lorem, a fermentum ante faucibus quis. Aliquam erat volutpat. In vitae tincidunt dui. Proin sit amet ligula sodales, elementum tortor et, venenatis sem. Maecenas non nisl erat. Curabitur nec velit eros. Ut cursus lacus nisi, non pretium libero euismod et. Fusce luctus in nisi quis sollicitudin. Aenean nec blandit ligula. Duis ac felis lorem. Proin tellus tellus, dictum nec tempus sit amet, venenatis ac felis. Sed in pharetra nulla, non mollis sem.</p>
<figure class="big">
    <img src="https://via.placeholder.com/1600x800"
         alt="image"/> <figcaption>
            <p>figure-big</p>
        </figcaption>
</figure>

<p>Suspendisse fringilla malesuada massa, in malesuada orci lacinia a. Praesent dapibus faucibus nisl, id volutpat elit bibendum eu. Nulla vitae laoreet nibh, eu hendrerit lacus. Donec lacinia auctor ligula, vel interdum ipsum malesuada vitae. Donec placerat a justo eu gravida. Aenean ultricies imperdiet convallis. Pellentesque accumsan non ex sed euismod. Proin bibendum lectus nec enim faucibus feugiat. Donec hendrerit nisi viverra ornare luctus. Nullam non viverra nisl. Nam vel tellus et tortor elementum volutpat sit amet et erat. Aliquam a libero quis libero porta consectetur. Etiam aliquam felis vel nulla mattis finibus. Mauris laoreet lacus arcu, sed rhoncus odio condimentum sed. Aenean in dui rutrum elit faucibus faucibus nec fringilla augue. Fusce non ornare mauris.</p>
<figure class="left">
    <img src="https://via.placeholder.com/400x280"
         alt="image"/> <figcaption>
            <p>figure-left</p>
        </figcaption>
</figure>

<p>In a libero varius, luctus ligula et, bibendum tortor. Sed sit amet dui malesuada, mattis justo id, ultricies enim. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Aliquam sollicitudin cursus feugiat. Vivamus suscipit ipsum eget lobortis sollicitudin. Fusce vehicula neque tellus. Integer eu posuere quam, id laoreet tortor. Mauris sit amet turpis urna. Donec venenatis tempor dolor, nec laoreet orci aliquet et. Sed condimentum elit eu tristique aliquam. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nunc luctus ipsum sit amet nisl maximus pellentesque.</p>
<figure class="right">
    <img src="https://via.placeholder.com/400x280"
         alt="image"/> <figcaption>
            <p>figure-right</p>
        </figcaption>
</figure>

<p>Pellentesque eu consequat nunc. Vivamus eu eros ut nulla dapibus molestie in id tortor. Cras viverra ligula erat, tincidunt hendrerit diam blandit nec. Cras id urna vel dolor dictum mattis. Vestibulum congue erat ac eros molestie accumsan. Maecenas lorem nibh, maximus vel justo eget, facilisis egestas lectus. Mauris eu est ut odio blandit consequat id feugiat eros. Fusce id suscipit mi, et lacinia lectus. Mauris a arcu placerat dolor iaculis feugiat nec non mi. Ut porttitor elit tortor, eget tempus velit mollis eu. Aliquam sem nulla, dictum cursus mauris ac, semper ullamcorper leo.</p>
<p>Donec nec tincidunt est. Sed id metus in erat fringilla mattis at id turpis. Aliquam tempor vehicula faucibus. Phasellus consequat aliquam odio. Morbi a ex vitae sapien porta auctor. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec sit amet nulla arcu. Praesent ut tortor purus. Praesent id eros diam. Pellentesque vitae dolor at nibh ultrices accumsan eu id urna. Aliquam finibus interdum orci in varius. Pellentesque a enim condimentum, condimentum felis id, vehicula augue. Vivamus cursus commodo eros nec lacinia.</p>
]]></content>
		</item>
		
		<item>
			<title>Post With Featured Image</title>
			<link>https://blog.glc.im/posts/backup/post-with-featured-image/</link>
			<pubDate>Mon, 01 Oct 2018 16:15:09 +0800</pubDate>
			
			<guid>https://blog.glc.im/posts/backup/post-with-featured-image/</guid>
			<description>Just define the image URL in the content’s front matter, the featured image will be displayed as the background.
For example:
---images:- https://picsum.photos/1024/768/?random---This is an array, you can set multiple urls, only the first url will be used. These images is also used in Twitter Cards and the Open Graph metadata.</description>
			<content type="html"><![CDATA[<p>Just define the image URL in the content’s front matter, the featured image will be displayed as the background.</p>
<p>For example:</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml">---<span class="w">
</span><span class="w"></span><span class="k">images</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- https<span class="p">:</span>//picsum.photos/<span class="m">1024</span>/<span class="m">768</span>/<span class="p">?</span>random<span class="w">
</span><span class="w"></span>---<span class="w">
</span></code></pre></div><p>This is an array, you can set multiple urls, only the first url will be used. These images is also used in <a href="https://developer.twitter.com/en/docs/tweets/optimize-with-cards/guides/getting-started.html">Twitter Cards</a> and the <a href="http://ogp.me/">Open Graph</a> metadata.</p>
]]></content>
		</item>
		
		<item>
			<title>Typography</title>
			<link>https://blog.glc.im/posts/backup/typography/</link>
			<pubDate>Sat, 29 Sep 2018 11:36:33 +0800</pubDate>
			
			<guid>https://blog.glc.im/posts/backup/typography/</guid>
			<description>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
 An apple is a sweet, edible fruit produced by an apple tree (Malus pumila).</description>
			<content type="html"><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
<blockquote>
<p>An apple is a sweet, edible fruit produced by an apple tree (Malus pumila). Apple trees are cultivated worldwide, and are the most widely grown species in the genus Malus. The tree originated in Central Asia, where its wild ancestor, Malus sieversii, is still found today. Apples have been grown for thousands of years in Asia and Europe, and were brought to North America by European colonists. Apples have religious and mythological significance in many cultures, including Norse, Greek and European Christian traditions.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
</blockquote>
<hr>
<p>Inline styles：</p>
<p><strong>strong</strong>, <em>emphasis</em>, <em><strong>strong and emphasis</strong></em>,<code>code</code>, <!-- raw HTML omitted -->underline<!-- raw HTML omitted -->, <del>strikethrough</del>, 😂🤣, $\LaTeX$, X^2^, H~2~O, ==highlight==, <a href="https://example.com">Link</a>, and image:</p>
<p><img src="https://picsum.photos/600/400/?random" alt="img"></p>
<hr>
<p>Headings:</p>
<h1 id="heading-1">Heading 1</h1>
<h2 id="heading-2">Heading 2</h2>
<h3 id="heading-3">Heading 3</h3>
<h4 id="heading-4">Heading 4</h4>
<h5 id="heading-5">Heading 5</h5>
<h6 id="heading-6">Heading 6</h6>
<p>Table:</p>
<table>
<thead>
<tr>
<th align="left">Left-Aligned</th>
<th align="center">Center Aligned</th>
<th align="right">Right Aligned</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">col 3 is</td>
<td align="center">some wordy text</td>
<td align="right">$1600</td>
</tr>
<tr>
<td align="left">col 2 is</td>
<td align="center">centered</td>
<td align="right">$12</td>
</tr>
<tr>
<td align="left">zebra stripes</td>
<td align="center">are neat</td>
<td align="right">$1</td>
</tr>
</tbody>
</table>
<p>Lists:</p>
<ul>
<li>Unordered list item 1.</li>
<li>Unordered list item 2.</li>
</ul>
<ol>
<li>ordered list item 1.</li>
<li>ordered list item 2.
<ul>
<li>sub-unordered list item 1.</li>
<li>sub-unordered list item 2.
<ul>
<li><input checked="" disabled="" type="checkbox"> something is DONE.</li>
<li><input disabled="" type="checkbox"> something is NOT DONE.</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>Syntax Highlighting:</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">num1</span><span class="p">,</span> <span class="nx">num2</span><span class="p">,</span> <span class="nx">sum</span>
<span class="nx">num1</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="s2">&#34;Enter first number&#34;</span><span class="p">)</span>
<span class="nx">num2</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="s2">&#34;Enter second number&#34;</span><span class="p">)</span>
<span class="nx">sum</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">num1</span><span class="p">)</span> <span class="o">+</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">num2</span><span class="p">)</span> <span class="c1">// &#34;+&#34; means &#34;add&#34;
</span><span class="c1"></span><span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;Sum = &#34;</span> <span class="o">+</span> <span class="nx">sum</span><span class="p">)</span>  <span class="c1">// &#34;+&#34; means combine into a string
</span></code></pre></div><section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>From <a href="https://en.wikipedia.org/wiki/Apple">https://en.wikipedia.org/wiki/Apple</a> <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
		</item>
		
		<item>
			<title>Creating a New Theme</title>
			<link>https://blog.glc.im/posts/backup/creating-a-new-theme/</link>
			<pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
			
			<guid>https://blog.glc.im/posts/backup/creating-a-new-theme/</guid>
			<description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
			<content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&rsquo;t cover using CSS to style your theme.</p>
<p>We&rsquo;ll start with creating a new site with a very basic template. Then we&rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.</p>
<p>In this tutorial, commands that you enter will start with the &ldquo;$&rdquo; prompt. The output will follow. Lines that start with &ldquo;#&rdquo; are comments that I&rsquo;ve added to explain a point. When I show updates to a file, the &ldquo;:wq&rdquo; on the last line means to save the file.</p>
<p>Here&rsquo;s an example:</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">## this is a comment
$ echo this is a command
this is a command

## edit the file
$ vi foo.md
+++
date = &#34;2014-09-28&#34;
title = &#34;creating a new theme&#34;
+++

bah and humbug
:wq

## show it
$ cat foo.md
+++
date = &#34;2014-09-28&#34;
title = &#34;creating a new theme&#34;
+++

bah and humbug
$
</code></pre></div><h2 id="some-definitions">Some Definitions</h2>
<p>There are a few concepts that you need to understand before creating a theme.</p>
<h3 id="skins">Skins</h3>
<p>Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.</p>
<p>You have two ways to create a skin. The simplest way is to create it in the <code>layouts/</code> directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the <code>layouts/</code> directory so it will always find the skin.</p>
<p>Your second choice is to create it in a sub-directory of the <code>themes/</code> directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?</p>
<p>The difference between creating a skin in <code>layouts/</code> and creating it in <code>themes/</code> is very subtle. A skin in <code>layouts/</code> can’t be customized without updating the templates and static files that it is built from. A skin created in <code>themes/</code>, on the other hand, can be and that makes it easier for other people to use it.</p>
<p>The rest of this tutorial will call a skin created in the <code>themes/</code> directory a theme.</p>
<p>Note that you can use this tutorial to create a skin in the <code>layouts/</code> directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.</p>
<h3 id="the-home-page">The Home Page</h3>
<p>The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.</p>
<h3 id="site-configuration-file">Site Configuration File</h3>
<p>When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.</p>
<p>Hugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your <code>content/</code> directory and template files in your <code>themes/</code> directory. It will create HTML files in your <code>public/</code> directory. You can change this by specifying alternate locations in the configuration file.</p>
<h3 id="content">Content</h3>
<p>Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.</p>
<h4 id="front-matter">Front Matter</h4>
<p>The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “<code>+++</code>”, YAML by “<code>---</code>”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.</p>
<p>The information in the front matter is passed into the template before the content is rendered into HTML.</p>
<h4 id="markdown">Markdown</h4>
<p>Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.</p>
<h3 id="template-files">Template Files</h3>
<p>Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it&rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.</p>
<p>There are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.</p>
<p>Hugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.</p>
<p>Please note that you can use the front matter to influence Hugo’s choice of templates.</p>
<h4 id="single-template">Single Template</h4>
<p>A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.</p>
<h4 id="list-template">List Template</h4>
<p>A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.</p>
<p>The homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.</p>
<h4 id="partial-template">Partial Template</h4>
<p>A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.</p>
<h2 id="create-a-new-site">Create a New Site</h2>
<p>Let&rsquo;s use Hugo to create a new web site. I&rsquo;m a Mac user, so I&rsquo;ll create mine in my home directory, in the Sites folder. If you&rsquo;re using Linux, you might have to create the folder first.</p>
<p>The &ldquo;new site&rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ hugo new site ~/Sites/zafta
$ cd ~/Sites/zafta
$ ls -l
total 8
drwxr-xr-x  7 quoha  staff  238 Sep 29 16:49 .
drwxr-xr-x  3 quoha  staff  102 Sep 29 16:49 ..
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
$
</code></pre></div><p>Take a look in the content/ directory to confirm that it is empty.</p>
<p>The other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That&rsquo;s a topic for a different tutorial, so please ignore them for now.</p>
<h3 id="generate-the-html-for-the-new-site">Generate the HTML For the New Site</h3>
<p>Running the <code>hugo</code> command with no options will read all the available content and generate the HTML files. It will also copy all static files (that&rsquo;s everything that&rsquo;s not content). Since we have an empty site, it won&rsquo;t do much, but it will do it very quickly.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ hugo --verbose
INFO: 2014/09/29 Using config file: config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content 
0 future content 
0 pages created 
0 tags created
0 categories created
in 2 ms
$ 
</code></pre></div><p>The &ldquo;<code>--verbose</code>&rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with &ldquo;INFO:&rdquo; or &ldquo;WARN:&rdquo; is present because we used that flag. The lines that start with &ldquo;WARN:&rdquo; are warning messages. We&rsquo;ll go over them later.</p>
<p>We can verify that the command worked by looking at the directory again.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ ls -l
total 8
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
$
</code></pre></div><p>See that new public/ directory? Hugo placed all generated content there. When you&rsquo;re ready to publish your web site, that&rsquo;s the place to start. For now, though, let&rsquo;s just confirm that we have what we&rsquo;d expect from a site with no content.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ ls -l public
total 16
-rw-r--r--  1 quoha  staff  416 Sep 29 17:02 index.xml
-rw-r--r--  1 quoha  staff  262 Sep 29 17:02 sitemap.xml
$ 
</code></pre></div><p>Hugo created two XML files, which is standard, but there are no HTML files.</p>
<h3 id="test-the-new-site">Test the New Site</h3>
<p>Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the &ldquo;server&rdquo; command. If it is successful, you will see output similar to the following:</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ hugo server --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content 
0 future content 
0 pages created 
0 tags created
0 categories created
in 2 ms
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
</code></pre></div><p>Connect to the listed URL (it&rsquo;s on the line that starts with &ldquo;Web Server&rdquo;). If everything is working correctly, you should get a page that shows the following:</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">index.xml
sitemap.xml
</code></pre></div><p>That&rsquo;s a listing of your public/ directory. Hugo didn&rsquo;t create a home page because our site has no content. When there&rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.</p>
<p>Let’s go back and look at those warnings again.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
</code></pre></div><p>That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.</p>
<p>Now for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.</p>
<p>I like that the verbose flag causes Hugo to list the files that it&rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we&rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn&rsquo;t find a template for the home page and it told you so.</p>
<p>At this point, you&rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.</p>
<h2 id="create-a-new-theme">Create a New Theme</h2>
<p>Hugo doesn&rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.</p>
<p>We&rsquo;re going to create a new theme called &ldquo;zafta.&rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.</p>
<p>All themes have opinions on content and layout. For example, Zafta uses &ldquo;post&rdquo; over &ldquo;blog&rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.</p>
<h3 id="create-a-skeleton">Create a Skeleton</h3>
<p>Use the hugo &ldquo;new&rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ hugo new theme zafta

$ ls -l
total 8
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
drwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes

$ find themes -type f | xargs ls -l
-rw-r--r--  1 quoha  staff  1081 Sep 29 17:31 themes/zafta/LICENSE.md
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/archetypes/default.md
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
-rw-r--r--  1 quoha  staff    93 Sep 29 17:31 themes/zafta/theme.toml
$ 
</code></pre></div><p>The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.</p>
<p>Please take a minute to fill out the theme.toml and LICENSE.md files. They&rsquo;re optional, but if you&rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It&rsquo;s also nice to declare the license so that people will know how they can use the theme.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ vi themes/zafta/theme.toml
author = &#34;michael d henderson&#34;
description = &#34;a minimal working template&#34;
license = &#34;MIT&#34;
name = &#34;zafta&#34;
source_repo = &#34;&#34;
tags = [&#34;tags&#34;, &#34;categories&#34;]
:wq

## also edit themes/zafta/LICENSE.md and change
## the bit that says &#34;YOUR_NAME_HERE&#34;
</code></pre></div><p>Note that the the skeleton&rsquo;s template files are empty. Don&rsquo;t worry, we&rsquo;ll be changing that shortly.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ find themes/zafta -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
$
</code></pre></div><h3 id="update-the-configuration-file-to-use-the-theme">Update the Configuration File to Use the Theme</h3>
<p>Now that we&rsquo;ve got a theme to work with, it&rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add &ldquo;-t zafta&rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don&rsquo;t put it in the configuration file or specify it on the command line, you won&rsquo;t use the template that you&rsquo;re expecting to.</p>
<p>Edit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ vi config.toml
theme = &#34;zafta&#34;
baseurl = &#34;&#34;
languageCode = &#34;en-us&#34;
title = &#34;zafta - totally refreshing&#34;
MetaDataFormat = &#34;toml&#34;
:wq

$
</code></pre></div><h3 id="generate-the-site">Generate the Site</h3>
<p>Now that we have an empty theme, let&rsquo;s generate the site again.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
0 pages created 
0 tags created
0 categories created
in 2 ms
$
</code></pre></div><p>Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme&rsquo;s directory.</p>
<p>Let&rsquo;s check the public/ directory to see what Hugo&rsquo;s created.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ ls -l public
total 16
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 css
-rw-r--r--  1 quoha  staff    0 Sep 29 17:56 index.html
-rw-r--r--  1 quoha  staff  407 Sep 29 17:56 index.xml
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 js
-rw-r--r--  1 quoha  staff  243 Sep 29 17:56 sitemap.xml
$
</code></pre></div><p>Notice four things:</p>
<ol>
<li>Hugo created a home page. This is the file public/index.html.</li>
<li>Hugo created a css/ directory.</li>
<li>Hugo created a js/ directory.</li>
<li>Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn&rsquo;t create any pages. That&rsquo;s because it considers a &ldquo;page&rdquo; to be a file created directly from a content file. It doesn&rsquo;t count things like the index.html files that it creates automatically.</li>
</ol>
<h4 id="the-home-page-1">The Home Page</h4>
<p>Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo&rsquo;s warning message shows that it looks for three different templates:</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
</code></pre></div><p>If it can&rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.</p>
<p>When Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ find . -name index.html | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 20:21 ./public/index.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 ./themes/zafta/layouts/index.html
$ 
</code></pre></div><h4 id="the-magic-of-static">The Magic of Static</h4>
<p>Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.</p>
<p>Hugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo&rsquo;s opinion is that you&rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don&rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo&rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ find themes/zafta -type d | xargs ls -ld
drwxr-xr-x  7 quoha  staff  238 Sep 29 17:38 themes/zafta
drwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes/zafta/archetypes
drwxr-xr-x  5 quoha  staff  170 Sep 29 17:31 themes/zafta/layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/_default
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/partials
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/static
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/css
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/js
$ 
</code></pre></div><h2 id="the-theme-development-cycle">The Theme Development Cycle</h2>
<p>When you&rsquo;re working on a theme, you will make changes in the theme&rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:</p>
<ol>
<li>Purge the public/ directory.</li>
<li>Run the built in web server in watch mode.</li>
<li>Open your site in a browser.</li>
<li>Update the theme.</li>
<li>Glance at your browser window to see changes.</li>
<li>Return to step 4.</li>
</ol>
<p>I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.</p>
<p>Check the main Hugo site for information on using Git with Hugo.</p>
<h3 id="purge-the-public-directory">Purge the public/ Directory</h3>
<p>When generating the site, Hugo will create new files and update existing ones in the <code>public/</code> directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.</p>
<p>Note: If you&rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.</p>
<h3 id="hugos-watch-option">Hugo&rsquo;s Watch Option</h3>
<p>Hugo&rsquo;s &ldquo;<code>--watch</code>&rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.</p>
<h3 id="live-reload">Live Reload</h3>
<p>Hugo&rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, &ldquo;Wow, that&rsquo;s totally amazing.&rdquo;</p>
<h3 id="development-commands">Development Commands</h3>
<p>Use the following commands as the basis for your workflow.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">## purge old files. hugo will recreate the public directory.
##
$ rm -rf public
##
## run hugo in watch mode
##
$ hugo server --watch --verbose
</code></pre></div><p>Here&rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I&rsquo;ve said this before, it&rsquo;s amazing.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ rm -rf public
$ hugo server --watch --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
0 pages created 
0 tags created
0 categories created
in 2 ms
Watching for changes in /Users/quoha/Sites/zafta/content
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
INFO: 2014/09/29 File System Event: [&#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html&#34;: MODIFY|ATTRIB]
Change detected, rebuilding site

WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
0 pages created 
0 tags created
0 categories created
in 1 ms
</code></pre></div><h2 id="update-the-home-page-template">Update the Home Page Template</h2>
<p>The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme&rsquo;s layout/ directory:</p>
<ol>
<li>index.html</li>
<li>_default/list.html</li>
<li>_default/single.html</li>
</ol>
<p>We could update one of the default templates, but a good design decision is to update the most specific template available. That&rsquo;s not a hard and fast rule (in fact, we&rsquo;ll break it a few times in this tutorial), but it is a good generalization.</p>
<h3 id="make-a-static-home-page">Make a Static Home Page</h3>
<p>Right now, that page is empty because we don&rsquo;t have any content and we don&rsquo;t have any logic in the template. Let&rsquo;s change that by adding some text to the template.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt; 
&lt;html&gt; 
&lt;body&gt; 
  &lt;p&gt;hugo says hello!&lt;/p&gt; 
&lt;/body&gt; 
&lt;/html&gt; 
:wq

$
</code></pre></div><p>Build the web site and then verify the results.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
0 pages created 
0 tags created
0 categories created
in 2 ms

$ find public -type f -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 quoha  staff  78 Sep 29 21:26 public/index.html

$ cat public/index.html 
&lt;!DOCTYPE html&gt; 
&lt;html&gt; 
&lt;body&gt; 
  &lt;p&gt;hugo says hello!&lt;/p&gt; 
&lt;/html&gt;
</code></pre></div><h4 id="live-reload-1">Live Reload</h4>
<p>Note: If you&rsquo;re running the server with the <code>--watch</code> option, you&rsquo;ll see different content in the file:</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ cat public/index.html 
&lt;!DOCTYPE html&gt; 
&lt;html&gt; 
&lt;body&gt; 
  &lt;p&gt;hugo says hello!&lt;/p&gt; 
&lt;script&gt;document.write(&#39;&lt;script src=&#34;http://&#39; 
        + (location.host || &#39;localhost&#39;).split(&#39;:&#39;)[0] 
    + &#39;:1313/livereload.js?mindelay=10&#34;&gt;&lt;/&#39; 
        + &#39;script&gt;&#39;)&lt;/script&gt;&lt;/body&gt; 
&lt;/html&gt;
</code></pre></div><p>When you use <code>--watch</code>, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.</p>
<h3 id="build-a-dynamic-home-page">Build a &ldquo;Dynamic&rdquo; Home Page</h3>
<p>&ldquo;Dynamic home page?&rdquo; Hugo&rsquo;s a static web site generator, so this seems an odd thing to say. I mean let&rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We&rsquo;ll use iteration in the template to do that.</p>
<h4 id="create-new-posts">Create New Posts</h4>
<p>Now that we have the home page generating static content, let&rsquo;s add some content to the site. We&rsquo;ll display these posts as a list on the home page and on their own page, too.</p>
<p>Hugo has a command to generate a skeleton post, just like it does for sites and themes.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md
ERROR: 2014/09/29 Unable to Cast &lt;nil&gt; to map[string]interface{}

$ 
</code></pre></div><p>That wasn&rsquo;t very nice, was it?</p>
<p>The &ldquo;new&rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there&rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ vi themes/zafta/archetypes/post.md
+++
Description = &#34;&#34;
Tags = []
Categories = []
+++
:wq

$ find themes/zafta/archetypes -type f | xargs ls -l
-rw-r--r--  1 quoha  staff   0 Sep 29 21:53 themes/zafta/archetypes/default.md
-rw-r--r--  1 quoha  staff  51 Sep 29 21:54 themes/zafta/archetypes/post.md

$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md
/Users/quoha/Sites/zafta/content/post/first.md created

$ hugo --verbose new post/second.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/second.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md
/Users/quoha/Sites/zafta/content/post/second.md created

$ ls -l content/post
total 16
-rw-r--r--  1 quoha  staff  104 Sep 29 21:54 first.md
-rw-r--r--  1 quoha  staff  105 Sep 29 21:57 second.md

$ cat content/post/first.md 
+++
Categories = []
Description = &#34;&#34;
Tags = []
date = &#34;2014-09-29T21:54:53-05:00&#34;
title = &#34;first&#34;

+++
my first post

$ cat content/post/second.md 
+++
Categories = []
Description = &#34;&#34;
Tags = []
date = &#34;2014-09-29T21:57:09-05:00&#34;
title = &#34;second&#34;

+++
my second post

$ 
</code></pre></div><p>Build the web site and then verify the results.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&#34;category&#34;:&#34;categories&#34;, &#34;tag&#34;:&#34;tags&#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
2 pages created 
0 tags created
0 categories created
in 4 ms
$
</code></pre></div><p>The output says that it created 2 pages. Those are our new posts:</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ find public -type f -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 quoha  staff  78 Sep 29 22:13 public/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/first/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/second/index.html
$
</code></pre></div><p>The new files are empty because because the templates used to generate the content are empty. The homepage doesn&rsquo;t show the new content, either. We have to update the templates to add the posts.</p>
<h3 id="list-and-single-templates">List and Single Templates</h3>
<p>In Hugo, we have three major kinds of templates. There&rsquo;s the home page template that we updated previously. It is used only by the home page. We also have &ldquo;single&rdquo; templates which are used to generate output for a single content file. We also have &ldquo;list&rdquo; templates that are used to group multiple pieces of content before generating output.</p>
<p>Generally speaking, list templates are named &ldquo;list.html&rdquo; and single templates are named &ldquo;single.html.&rdquo;</p>
<p>There are three other types of templates: partials, content views, and terms. We will not go into much detail on these.</p>
<h3 id="add-content-to-the-homepage">Add Content to the Homepage</h3>
<p>The home page will contain a list of posts. Let&rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ vi themes/zafta/layouts/index.html 
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  {{ range first 10 .Data.Pages }}
    &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ end }}
&lt;/body&gt;
&lt;/html&gt;
:wq

$
</code></pre></div><p>Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between &ldquo;{{&rdquo; and &ldquo;}}&rdquo;. In our template, the commands are:</p>
<ol>
<li>range</li>
<li>.Title</li>
<li>end</li>
</ol>
<p>The &ldquo;range&rdquo; command is an iterator. We&rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.</p>
<p>The &ldquo;.Title&rdquo; command prints the value of the &ldquo;title&rdquo; variable. Hugo pulls it from the front matter in the Markdown file.</p>
<p>The &ldquo;end&rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds &ldquo;end.&rdquo; Everything between the &ldquo;range&rdquo; and &ldquo;end&rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.</p>
<p>It&rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.</p>
<p>Build the web site and then verify the results.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&#34;tag&#34;:&#34;tags&#34;, &#34;category&#34;:&#34;categories&#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
2 pages created 
0 tags created
0 categories created
in 4 ms
$ find public -type f -name &#39;*.html&#39; | xargs ls -l 
-rw-r--r--  1 quoha  staff  94 Sep 29 22:23 public/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/first/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/second/index.html
$ cat public/index.html 
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  
    &lt;h1&gt;second&lt;/h1&gt;
  
    &lt;h1&gt;first&lt;/h1&gt;
  
&lt;/body&gt;
&lt;/html&gt;
$
</code></pre></div><p>Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let&rsquo;s take a moment to appreciate what we&rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you&rsquo;ve learned everything you need to know to build a theme. All that&rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.</p>
<p>And, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don&rsquo;t worry, though, that&rsquo;s all to come.</p>
<h3 id="add-content-to-the-posts">Add Content to the Posts</h3>
<p>We&rsquo;re working with posts, which are in the content/post/ directory. That means that their section is &ldquo;post&rdquo; (and if we don&rsquo;t do something weird, their type is also &ldquo;post&rdquo;).</p>
<p>Hugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can&rsquo;t find one, then it will look in the _default/ directory. There are some twists that we&rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.</p>
<p>Now that we know the search rule, let&rsquo;s see what we actually have available:</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ find themes/zafta -name single.html | xargs ls -l
-rw-r--r--  1 quoha  staff  132 Sep 29 17:31 themes/zafta/layouts/_default/single.html
</code></pre></div><p>We could create a new template, post/single.html, or change the default. Since we don&rsquo;t know of any other content types, let&rsquo;s start with updating the default.</p>
<p>Remember, any content that we haven&rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we&rsquo;re going to be adding different types of content and we&rsquo;re going to end up undoing some of the changes we&rsquo;ve made. It&rsquo;s good because we&rsquo;ll be able to see immediate results. It&rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we&rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we&rsquo;ll accept the cost and proceed.</p>
<p>Please see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you&rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That&rsquo;s a refreshing amount of joy right there.</p>
<h4 id="update-the-template-file">Update the Template File</h4>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ vi themes/zafta/layouts/_default/single.html 
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;{{ .Title }}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ .Content }}
&lt;/body&gt;
&lt;/html&gt;
:wq

$
</code></pre></div><p>Build the web site and verify the results.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&#34;tag&#34;:&#34;tags&#34;, &#34;category&#34;:&#34;categories&#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
2 pages created 
0 tags created
0 categories created
in 4 ms

$ find public -type f -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 quoha  staff   94 Sep 29 22:40 public/index.html
-rw-r--r--  1 quoha  staff  125 Sep 29 22:40 public/post/first/index.html
-rw-r--r--  1 quoha  staff    0 Sep 29 22:40 public/post/index.html
-rw-r--r--  1 quoha  staff  128 Sep 29 22:40 public/post/second/index.html

$ cat public/post/first/index.html 
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;first&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;first&lt;/h1&gt;
  &lt;p&gt;my first post&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;

$ cat public/post/second/index.html 
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;second&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;second&lt;/h1&gt;
  &lt;p&gt;my second post&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
$
</code></pre></div><p>Notice that the posts now have content. You can go to localhost:1313/post/first to verify.</p>
<h3 id="linking-to-content">Linking to Content</h3>
<p>The posts are on the home page. Let&rsquo;s add a link from there to the post. Since this is the home page, we&rsquo;ll update its template.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  {{ range first 10 .Data.Pages }}
    &lt;h1&gt;&lt;a href=&#34;{{ .Permalink }}&#34;&gt;{{ .Title }}&lt;/a&gt;&lt;/h1&gt;
  {{ end }}
&lt;/body&gt;
&lt;/html&gt;
</code></pre></div><p>Build the web site and verify the results.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&#34;tag&#34;:&#34;tags&#34;, &#34;category&#34;:&#34;categories&#34;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
2 pages created 
0 tags created
0 categories created
in 4 ms

$ find public -type f -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 quoha  staff  149 Sep 29 22:44 public/index.html
-rw-r--r--  1 quoha  staff  125 Sep 29 22:44 public/post/first/index.html
-rw-r--r--  1 quoha  staff    0 Sep 29 22:44 public/post/index.html
-rw-r--r--  1 quoha  staff  128 Sep 29 22:44 public/post/second/index.html

$ cat public/index.html 
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  
    &lt;h1&gt;&lt;a href=&#34;https://blog.glc.im/post/second/&#34;&gt;second&lt;/a&gt;&lt;/h1&gt;
  
    &lt;h1&gt;&lt;a href=&#34;https://blog.glc.im/post/first/&#34;&gt;first&lt;/a&gt;&lt;/h1&gt;
  
&lt;/body&gt;
&lt;/html&gt;

$
</code></pre></div><h3 id="create-a-post-listing">Create a Post Listing</h3>
<p>We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let&rsquo;s make it show a list of all posts (not just the first ten).</p>
<p>We need to decide which template to update. This will be a listing, so it should be a list template. Let&rsquo;s take a quick look and see which list templates are available.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ find themes/zafta -name list.html | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
</code></pre></div><p>As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don&rsquo;t have multiple content types, so let&rsquo;s stay consistent and update the default list template.</p>
<h2 id="creating-top-level-pages">Creating Top Level Pages</h2>
<p>Let&rsquo;s add an &ldquo;about&rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).</p>
<p>The default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let&rsquo;s verify that by creating an &ldquo;about&rdquo; page at the top level:</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ vi content/about.md 
+++
title = &#34;about&#34;
description = &#34;about this site&#34;
date = &#34;2014-09-27&#34;
slug = &#34;about time&#34;
+++

## about us

i&#39;m speechless
:wq
</code></pre></div><p>Generate the web site and verify the results.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ find public -name &#39;*.html&#39; | xargs ls -l
-rw-rw-r--  1 mdhender  staff   334 Sep 27 15:08 public/about-time/index.html
-rw-rw-r--  1 mdhender  staff   527 Sep 27 15:08 public/index.html
-rw-rw-r--  1 mdhender  staff   358 Sep 27 15:08 public/post/first-post/index.html
-rw-rw-r--  1 mdhender  staff     0 Sep 27 15:08 public/post/index.html
-rw-rw-r--  1 mdhender  staff   342 Sep 27 15:08 public/post/second-post/index.html
</code></pre></div><p>Notice that the page wasn&rsquo;t created at the top level. It was created in a sub-directory named &lsquo;about-time/&rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It&rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.</p>
<p>One other thing. Take a look at the home page.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
    &lt;h1&gt;&lt;a href=&#34;http://localhost:1313/post/theme/&#34;&gt;creating a new theme&lt;/a&gt;&lt;/h1&gt;
    &lt;h1&gt;&lt;a href=&#34;http://localhost:1313/about-time/&#34;&gt;about&lt;/a&gt;&lt;/h1&gt;
    &lt;h1&gt;&lt;a href=&#34;http://localhost:1313/post/second-post/&#34;&gt;second&lt;/a&gt;&lt;/h1&gt;
    &lt;h1&gt;&lt;a href=&#34;http://localhost:1313/post/first-post/&#34;&gt;first&lt;/a&gt;&lt;/h1&gt;
&lt;script&gt;document.write(&#39;&lt;script src=&#34;http://&#39;
        + (location.host || &#39;localhost&#39;).split(&#39;:&#39;)[0]
		+ &#39;:1313/livereload.js?mindelay=10&#34;&gt;&lt;/&#39;
        + &#39;script&gt;&#39;)&lt;/script&gt;&lt;/body&gt;
&lt;/html&gt;
</code></pre></div><p>Notice that the &ldquo;about&rdquo; link is listed with the posts? That&rsquo;s not desirable, so let&rsquo;s change that first.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;h1&gt;posts&lt;/h1&gt;
  {{ range first 10 .Data.Pages }}
    {{ if eq .Type &#34;post&#34;}}
      &lt;h2&gt;&lt;a href=&#34;{{ .Permalink }}&#34;&gt;{{ .Title }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}

  &lt;h1&gt;pages&lt;/h1&gt;
  {{ range .Data.Pages }}
    {{ if eq .Type &#34;page&#34; }}
      &lt;h2&gt;&lt;a href=&#34;{{ .Permalink }}&#34;&gt;{{ .Title }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}
&lt;/body&gt;
&lt;/html&gt;
:wq
</code></pre></div><p>Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.</p>
<p>But, that about page still renders to about-time/index.html.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ find public -name &#39;*.html&#39; | xargs ls -l
-rw-rw-r--  1 mdhender  staff    334 Sep 27 15:33 public/about-time/index.html
-rw-rw-r--  1 mdhender  staff    645 Sep 27 15:33 public/index.html
-rw-rw-r--  1 mdhender  staff    358 Sep 27 15:33 public/post/first-post/index.html
-rw-rw-r--  1 mdhender  staff      0 Sep 27 15:33 public/post/index.html
-rw-rw-r--  1 mdhender  staff    342 Sep 27 15:33 public/post/second-post/index.html
</code></pre></div><p>Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let&rsquo;s do it the hard way and change the permalink in the configuration file.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ vi config.toml
[permalinks]
	page = &#34;/:title/&#34;
	about = &#34;/:filename/&#34;
</code></pre></div><p>Generate the web site and verify that this didn&rsquo;t work. Hugo lets &ldquo;slug&rdquo; or &ldquo;URL&rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.</p>
<h2 id="sharing-templates">Sharing Templates</h2>
<p>If you&rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn&rsquo;t. That&rsquo;s because we didn&rsquo;t put the title in the home page&rsquo;s template (layouts/index.html). That&rsquo;s an easy thing to do, but let&rsquo;s look at a different option.</p>
<p>We can put the common bits into a shared template that&rsquo;s stored in the themes/zafta/layouts/partials/ directory.</p>
<h3 id="create-the-header-and-footer-partials">Create the Header and Footer Partials</h3>
<p>In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme&rsquo;s presentation.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ vi themes/zafta/layouts/partials/header.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;title&gt;{{ .Title }}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
:wq

$ vi themes/zafta/layouts/partials/footer.html
&lt;/body&gt;
&lt;/html&gt;
:wq
</code></pre></div><h3 id="update-the-home-page-template-to-use-the-partials">Update the Home Page Template to Use the Partials</h3>
<p>The most noticeable difference between a template call and a partials call is the lack of path:</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">{{ template &#34;theme/partials/header.html&#34; . }}
</code></pre></div><p>versus</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">{{ partial &#34;header.html&#34; . }}
</code></pre></div><p>Both pass in the context.</p>
<p>Let&rsquo;s change the home page template to use these new partials.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ vi themes/zafta/layouts/index.html
{{ partial &#34;header.html&#34; . }}

  &lt;h1&gt;posts&lt;/h1&gt;
  {{ range first 10 .Data.Pages }}
    {{ if eq .Type &#34;post&#34;}}
      &lt;h2&gt;&lt;a href=&#34;{{ .Permalink }}&#34;&gt;{{ .Title }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}

  &lt;h1&gt;pages&lt;/h1&gt;
  {{ range .Data.Pages }}
    {{ if or (eq .Type &#34;page&#34;) (eq .Type &#34;about&#34;) }}
      &lt;h2&gt;&lt;a href=&#34;{{ .Permalink }}&#34;&gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}

{{ partial &#34;footer.html&#34; . }}
:wq
</code></pre></div><p>Generate the web site and verify the results. The title on the home page is now &ldquo;your title here&rdquo;, which comes from the &ldquo;title&rdquo; variable in the config.toml file.</p>
<h3 id="update-the-default-single-template-to-use-the-partials">Update the Default Single Template to Use the Partials</h3>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ vi themes/zafta/layouts/_default/single.html
{{ partial &#34;header.html&#34; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ .Content }}

{{ partial &#34;footer.html&#34; . }}
:wq
</code></pre></div><p>Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.</p>
<h2 id="add-date-published-to-posts">Add “Date Published” to Posts</h2>
<p>It&rsquo;s common to have posts display the date that they were written or published, so let&rsquo;s add that. The front matter of our posts has a variable named &ldquo;date.&rdquo; It&rsquo;s usually the date the content was created, but let&rsquo;s pretend that&rsquo;s the value we want to display.</p>
<h3 id="add-date-published-to-the-template">Add “Date Published” to the Template</h3>
<p>We&rsquo;ll start by updating the template used to render the posts. The template code will look like:</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">{{ .Date.Format &#34;Mon, Jan 2, 2006&#34; }}
</code></pre></div><p>Posts use the default single template, so we&rsquo;ll change that file.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ vi themes/zafta/layouts/_default/single.html
{{ partial &#34;header.html&#34; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  &lt;h2&gt;{{ .Date.Format &#34;Mon, Jan 2, 2006&#34; }}&lt;/h2&gt;
  {{ .Content }}

{{ partial &#34;footer.html&#34; . }}
:wq
</code></pre></div><p>Generate the web site and verify the results. The posts now have the date displayed in them. There&rsquo;s a problem, though. The &ldquo;about&rdquo; page also has the date displayed.</p>
<p>As usual, there are a couple of ways to make the date display only on posts. We could do an &ldquo;if&rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.</p>
<p>The &ldquo;if&rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of &ldquo;code for today,&rdquo; too.</p>
<p>Let&rsquo;s assume, though, that we&rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we&rsquo;re going to create a section template.</p>
<p>Let&rsquo;s restore the default single template before we forget.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ mkdir themes/zafta/layouts/post
$ vi themes/zafta/layouts/_default/single.html
{{ partial &#34;header.html&#34; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ .Content }}

{{ partial &#34;footer.html&#34; . }}
:wq
</code></pre></div><p>Now we&rsquo;ll update the post&rsquo;s version of the single template. If you remember Hugo&rsquo;s rules, the template engine will use this version over the default.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ vi themes/zafta/layouts/post/single.html
{{ partial &#34;header.html&#34; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  &lt;h2&gt;{{ .Date.Format &#34;Mon, Jan 2, 2006&#34; }}&lt;/h2&gt;
  {{ .Content }}

{{ partial &#34;footer.html&#34; . }}
:wq

</code></pre></div><p>Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn&rsquo;t.</p>
<h3 id="dont-repeat-yourself">Don&rsquo;t Repeat Yourself</h3>
<p>DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you&rsquo;re figuring that out, accept that you&rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it&rsquo;s okay to delay splitting up a template.</p>
]]></content>
		</item>
		
		<item>
			<title>(Hu)go Template Primer</title>
			<link>https://blog.glc.im/posts/backup/goisforlovers/</link>
			<pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
			
			<guid>https://blog.glc.im/posts/backup/goisforlovers/</guid>
			<description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
			<content type="html"><![CDATA[<p>Hugo uses the excellent <a href="https://golang.org/">Go</a> <a href="https://golang.org/pkg/html/template/">html/template</a> library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in Go templates.</p>
<p>This document is a brief primer on using Go templates. The <a href="https://golang.org/pkg/html/template/">Go docs</a>
provide more details.</p>
<h2 id="introduction-to-go-templates">Introduction to Go Templates</h2>
<p>Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that Go templates parse very quickly.</p>
<p>A unique characteristic of Go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the <a href="https://golang.org/pkg/html/template/">Go docs</a>.</p>
<h2 id="basic-syntax">Basic Syntax</h2>
<p>Golang templates are HTML files with the addition of variables and
functions.</p>
<p><strong>Go variables and functions are accessible within {{ }}</strong></p>
<p>Accessing a predefined variable &ldquo;foo&rdquo;:</p>
<pre><code>{{ foo }}
</code></pre>
<p><strong>Parameters are separated using spaces</strong></p>
<p>Calling the add function with input of 1, 2:</p>
<pre><code>{{ add 1 2 }}
</code></pre>
<p><strong>Methods and fields are accessed via dot notation</strong></p>
<p>Accessing the Page Parameter &ldquo;bar&rdquo;</p>
<pre><code>{{ .Params.bar }}
</code></pre>
<p><strong>Parentheses can be used to group items together</strong></p>
<pre><code>{{ if or (isset .Params &quot;alt&quot;) (isset .Params &quot;caption&quot;) }} Caption {{ end }}
</code></pre>
<h2 id="variables">Variables</h2>
<p>Each Go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
<a href="/layout/variables">variables</a> page.</p>
<p>A variable is accessed by referencing the variable name.</p>
<pre><code>&lt;title&gt;{{ .Title }}&lt;/title&gt;
</code></pre>
<p>Variables can also be defined and referenced.</p>
<pre><code>{{ $address := &quot;123 Main St.&quot;}}
{{ $address }}
</code></pre>
<h2 id="functions">Functions</h2>
<p>Go template ship with a few functions which provide basic functionality. The Go
template system also provides a mechanism for applications to extend the
available functions with their own. <a href="/layout/functions">Hugo template
functions</a> provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.</p>
<p><strong>Example:</strong></p>
<pre><code>{{ add 1 2 }}
</code></pre>
<h2 id="includes">Includes</h2>
<p>When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.</p>
<p><strong>Example:</strong></p>
<pre><code>{{ template &quot;chrome/header.html&quot; . }}
</code></pre>
<h2 id="logic">Logic</h2>
<p>Go templates provide the most basic iteration and conditional logic.</p>
<h3 id="iteration">Iteration</h3>
<p>Just like in Go, the Go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.</p>
<p><strong>Example 1: Using Context</strong></p>
<pre><code>{{ range array }}
    {{ . }}
{{ end }}
</code></pre>
<p><strong>Example 2: Declaring value variable name</strong></p>
<pre><code>{{range $element := array}}
    {{ $element }}
{{ end }}
</code></pre>
<p><strong>Example 2: Declaring key and value variable name</strong></p>
<pre><code>{{range $index, $element := array}}
    {{ $index }}
    {{ $element }}
{{ end }}
</code></pre>
<h3 id="conditionals">Conditionals</h3>
<p>If, else, with, or, &amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with <code>end</code>.</p>
<p>Go Templates treat the following values as false:</p>
<ul>
<li>false</li>
<li>0</li>
<li>any array, slice, map, or string of length zero</li>
</ul>
<p><strong>Example 1: If</strong></p>
<pre><code>{{ if isset .Params &quot;title&quot; }}&lt;h4&gt;{{ index .Params &quot;title&quot; }}&lt;/h4&gt;{{ end }}
</code></pre>
<p><strong>Example 2: If -&gt; Else</strong></p>
<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{else}}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>
<p><strong>Example 3: And &amp; Or</strong></p>
<pre><code>{{ if and (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;)) (isset .Params &quot;attr&quot;)}}
</code></pre>
<p><strong>Example 4: With</strong></p>
<p>An alternative way of writing &ldquo;if&rdquo; and then referencing the same value
is to use &ldquo;with&rdquo; instead. With rebinds the context <code>.</code> within its scope,
and skips the block if the variable is absent.</p>
<p>The first example above could be simplified as:</p>
<pre><code>{{ with .Params.title }}&lt;h4&gt;{{ . }}&lt;/h4&gt;{{ end }}
</code></pre>
<p><strong>Example 5: If -&gt; Else If</strong></p>
<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{ else if isset .Params &quot;caption&quot; }}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>
<h2 id="pipes">Pipes</h2>
<p>One of the most powerful components of Go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline&rsquo;s output becomes the
input of the following pipe.</p>
<p>Because of the very simple syntax of Go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.</p>
<p>A few simple examples should help convey how to use the pipe.</p>
<p><strong>Example 1 :</strong></p>
<pre><code>{{ if eq 1 1 }} Same {{ end }}
</code></pre>
<p>is the same as</p>
<pre><code>{{ eq 1 1 | if }} Same {{ end }}
</code></pre>
<p>It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.</p>
<p><strong>Example 2 :</strong></p>
<pre><code>{{ index .Params &quot;disqus_url&quot; | html }}
</code></pre>
<p>Access the page parameter called &ldquo;disqus_url&rdquo; and escape the HTML.</p>
<p><strong>Example 3 :</strong></p>
<pre><code>{{ if or (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;)) (isset .Params &quot;attr&quot;)}}
Stuff Here
{{ end }}
</code></pre>
<p>Could be rewritten as</p>
<pre><code>{{  isset .Params &quot;caption&quot; | or isset .Params &quot;title&quot; | or isset .Params &quot;attr&quot; | if }}
Stuff Here
{{ end }}
</code></pre>
<h2 id="context-aka-the-dot">Context (aka. the dot)</h2>
<p>The most easily overlooked concept to understand about Go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.</p>
<p><strong>Example:</strong></p>
<pre><code>  {{ $title := .Site.Title }}
  {{ range .Params.tags }}
    &lt;li&gt; &lt;a href=&quot;{{ $baseurl }}/tags/{{ . | urlize }}&quot;&gt;{{ . }}&lt;/a&gt; - {{ $title }} &lt;/li&gt;
  {{ end }}
</code></pre>
<p>Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.</p>
<h1 id="hugo-parameters">Hugo Parameters</h1>
<p>Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.</p>
<h2 id="using-content-page-parameters">Using Content (page) Parameters</h2>
<p>In each piece of content you can provide variables to be used by the
templates. This happens in the <a href="/content/front-matter">front matter</a>.</p>
<p>An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn&rsquo;t make a lot of sense. We&rsquo;ve defined a variable in our front matter
of some pages to turn off the TOC from being displayed.</p>
<p>Here is the example front matter:</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">---
title: &#34;Permalinks&#34;
date: &#34;2013-11-18&#34;
aliases:
  - &#34;/doc/permalinks/&#34;
groups: [&#34;extras&#34;]
groups_weight: 30
notoc: true
---
</code></pre></div><p>Here is the corresponding code inside of the template:</p>
<pre><code>  {{ if not .Params.notoc }}
    &lt;div id=&quot;toc&quot; class=&quot;well col-md-4 col-sm-6&quot;&gt;
    {{ .TableOfContents }}
    &lt;/div&gt;
  {{ end }}
</code></pre>
<h2 id="using-site-config-parameters">Using Site (config) Parameters</h2>
<p>In your top-level configuration file (eg, <code>config.yaml</code>) you can define site
parameters, which are values which will be available to you in chrome.</p>
<p>For instance, you might declare:</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="k">params</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">CopyrightHTML</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Copyright &amp;#xA9; 2013 John Doe. All Rights Reserved.&#34;</span><span class="w">
</span><span class="w">  </span><span class="k">TwitterUser</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;spf13&#34;</span><span class="w">
</span><span class="w">  </span><span class="k">SidebarRecentLimit</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></code></pre></div><p>Within a footer layout, you might then declare a <code>&lt;footer&gt;</code> which is only
provided if the <code>CopyrightHTML</code> parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again.  This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">{{if .Site.Params.CopyrightHTML}}&lt;footer&gt;
&lt;div class=&#34;text-center&#34;&gt;{{.Site.Params.CopyrightHTML | safeHtml}}&lt;/div&gt;
&lt;/footer&gt;{{end}}
</code></pre></div><p>An alternative way of writing the &ldquo;if&rdquo; and then referencing the same value
is to use &ldquo;with&rdquo; instead. With rebinds the context <code>.</code> within its scope,
and skips the block if the variable is absent:</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">{{with .Site.Params.TwitterUser}}&lt;span class=&#34;twitter&#34;&gt;
&lt;a href=&#34;https://twitter.com/{{.}}&#34; rel=&#34;author&#34;&gt;
&lt;img src=&#34;https://blog.glc.im/images/twitter.png&#34; width=&#34;48&#34; height=&#34;48&#34; title=&#34;Twitter: {{.}}&#34;
 alt=&#34;Twitter&#34;&gt;&lt;/a&gt;
&lt;/span&gt;{{end}}
</code></pre></div><p>Finally, if you want to pull &ldquo;magic constants&rdquo; out of your layouts, you can do
so, such as in this example:</p>
<div class="highlight"><pre class="chroma"><code class="language-fallback" data-lang="fallback">&lt;nav class=&#34;recent&#34;&gt;
  &lt;h1&gt;Recent Posts&lt;/h1&gt;
  &lt;ul&gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &lt;li&gt;&lt;a href=&#34;{{.RelPermalink}}&#34;&gt;{{.Title}}&lt;/a&gt;&lt;/li&gt;
  {{end}}&lt;/ul&gt;
&lt;/nav&gt;
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Getting Started with Hugo</title>
			<link>https://blog.glc.im/posts/backup/hugoisforlovers/</link>
			<pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
			
			<guid>https://blog.glc.im/posts/backup/hugoisforlovers/</guid>
			<description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
			<content type="html"><![CDATA[<h2 id="step-1-install-hugo">Step 1. Install Hugo</h2>
<p>Go to <a href="https://github.com/spf13/hugo/releases">Hugo releases</a> and download the
appropriate version for your OS and architecture.</p>
<p>Save it somewhere specific as we will be using it in the next step.</p>
<p>More complete instructions are available at <a href="https://gohugo.io/getting-started/installing/">Install Hugo</a></p>
<h2 id="step-2-build-the-docs">Step 2. Build the Docs</h2>
<p>Hugo has its own example site which happens to also be the documentation site
you are reading right now.</p>
<p>Follow the following steps:</p>
<ol>
<li>Clone the <a href="http://github.com/spf13/hugo">Hugo repository</a></li>
<li>Go into the repo</li>
<li>Run hugo in server mode and build the docs</li>
<li>Open your browser to http://localhost:1313</li>
</ol>
<p>Corresponding pseudo commands:</p>
<pre><code>git clone https://github.com/spf13/hugo
cd hugo
/path/to/where/you/installed/hugo server --source=./docs
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Press ctrl+c to stop
</code></pre>
<p>Once you&rsquo;ve gotten here, follow along the rest of this page on your local build.</p>
<h2 id="step-3-change-the-docs-site">Step 3. Change the docs site</h2>
<p>Stop the Hugo process by hitting Ctrl+C.</p>
<p>Now we are going to run hugo again, but this time with hugo in watch mode.</p>
<pre><code>/path/to/hugo/from/step/1/hugo server --source=./docs --watch
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&gt; Press ctrl+c to stop
</code></pre>
<p>Open your <a href="http://vim.spf13.com">favorite editor</a> and change one of the source
content pages. How about changing this very file to <em>fix the typo</em>. How about changing this very file to <em>fix the typo</em>.</p>
<p>Content files are found in <code>docs/content/</code>. Unless otherwise specified, files
are located at the same relative location as the url, in our case
<code>docs/content/overview/quickstart.md</code>.</p>
<p>Change and save this file.. Notice what happened in your terminal.</p>
<pre><code>&gt; Change detected, rebuilding site

&gt; 29 pages created
&gt; 0 tags index created
&gt; in 26 ms
</code></pre>
<p>Refresh the browser and observe that the typo is now fixed.</p>
<p>Notice how quick that was. Try to refresh the site before it&rsquo;s finished building. I double dare you.
Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.</p>
<h2 id="step-4-have-fun">Step 4. Have fun</h2>
<p>The best way to learn something is to play with it.</p>
]]></content>
		</item>
		
		<item>
			<title>Migrate to Hugo from Jekyll</title>
			<link>https://blog.glc.im/posts/backup/migrate-from-jekyll/</link>
			<pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
			
			<guid>https://blog.glc.im/posts/backup/migrate-from-jekyll/</guid>
			<description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
			<content type="html"><![CDATA[<h2 id="move-static-content-to-static">Move static content to <code>static</code></h2>
<p>Jekyll has a rule that any directory not starting with <code>_</code> will be copied as-is to the <code>_site</code> output. Hugo keeps all static content under <code>static</code>. You should therefore move it all there.
With Jekyll, something that looked like</p>
<pre><code>▾ &lt;root&gt;/
    ▾ images/
        logo.png
</code></pre>
<p>should become</p>
<pre><code>▾ &lt;root&gt;/
    ▾ static/
        ▾ images/
            logo.png
</code></pre>
<p>Additionally, you&rsquo;ll want any files that should reside at the root (such as <code>CNAME</code>) to be moved to <code>static</code>.</p>
<h2 id="create-your-hugo-configuration-file">Create your Hugo configuration file</h2>
<p>Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the <a href="/overview/configuration/">Hugo configuration documentation</a> for details.</p>
<h2 id="set-your-configuration-publish-folder-to-_site">Set your configuration publish folder to <code>_site</code></h2>
<p>The default is for Jekyll to publish to <code>_site</code> and for Hugo to publish to <code>public</code>. If, like me, you have <a href="http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html"><code>_site</code> mapped to a git submodule on the <code>gh-pages</code> branch</a>, you&rsquo;ll want to do one of two alternatives:</p>
<ol>
<li>
<p>Change your submodule to point to map <code>gh-pages</code> to public instead of <code>_site</code> (recommended).</p>
<pre><code> git submodule deinit _site
 git rm _site
 git submodule add -b gh-pages git@github.com:your-username/your-repo.git public
</code></pre>
</li>
<li>
<p>Or, change the Hugo configuration to use <code>_site</code> instead of <code>public</code>.</p>
<pre><code> {
     ..
     &quot;publishdir&quot;: &quot;_site&quot;,
     ..
 }
</code></pre>
</li>
</ol>
<h2 id="convert-jekyll-templates-to-hugo-templates">Convert Jekyll templates to Hugo templates</h2>
<p>That&rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to <a href="http://jekyllrb.com/docs/templates/">Jekyll&rsquo;s template documentation</a> if you need to refresh your memory on how you built your blog and <a href="/layout/templates/">Hugo&rsquo;s template</a> to learn Hugo&rsquo;s way.</p>
<p>As a single reference data point, converting my templates for <a href="http://heyitsalex.net/">heyitsalex.net</a> took me no more than a few hours.</p>
<h2 id="convert-jekyll-plugins-to-hugo-shortcodes">Convert Jekyll plugins to Hugo shortcodes</h2>
<p>Jekyll has <a href="http://jekyllrb.com/docs/plugins/">plugins</a>; Hugo has <a href="/doc/shortcodes/">shortcodes</a>. It&rsquo;s fairly trivial to do a port.</p>
<h3 id="implementation">Implementation</h3>
<p>As an example, I was using a custom <a href="https://github.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc06908ec/_plugins/image_tag.rb"><code>image_tag</code></a> plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.</p>
<p>Jekyll&rsquo;s plugin:</p>
<pre><code>module Jekyll
  class ImageTag &lt; Liquid::Tag
    @url = nil
    @caption = nil
    @class = nil
    @link = nil
    // Patterns
    IMAGE_URL_WITH_CLASS_AND_CAPTION =
    IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&quot;(.*?)&quot;(\s+)-&gt;((https?:\/\/|\/)(\S+))(\s*)/i
    IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&quot;(.*?)&quot;/i
    IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
    IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
    def initialize(tag_name, markup, tokens)
      super
      if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
        @class   = $1
        @url     = $3
        @caption = $7
        @link = $9
      elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
        @class   = $1
        @url     = $3
        @caption = $7
      elsif markup =~ IMAGE_URL_WITH_CAPTION
        @url     = $1
        @caption = $5
      elsif markup =~ IMAGE_URL_WITH_CLASS
        @class = $1
        @url   = $3
      elsif markup =~ IMAGE_URL
        @url = $1
      end
    end
    def render(context)
      if @class
        source = &quot;&lt;figure class='#{@class}'&gt;&quot;
      else
        source = &quot;&lt;figure&gt;&quot;
      end
      if @link
        source += &quot;&lt;a href=\&quot;#{@link}\&quot;&gt;&quot;
      end
      source += &quot;&lt;img src=\&quot;#{@url}\&quot;&gt;&quot;
      if @link
        source += &quot;&lt;/a&gt;&quot;
      end
      source += &quot;&lt;figcaption&gt;#{@caption}&lt;/figcaption&gt;&quot; if @caption
      source += &quot;&lt;/figure&gt;&quot;
      source
    end
  end
end
Liquid::Template.register_tag('image', Jekyll::ImageTag)
</code></pre>
<p>is written as this Hugo shortcode:</p>
<pre><code>&lt;!-- image --&gt;
&lt;figure {{ with .Get &quot;class&quot; }}class=&quot;{{.}}&quot;{{ end }}&gt;
    {{ with .Get &quot;link&quot;}}&lt;a href=&quot;{{.}}&quot;&gt;{{ end }}
        &lt;img src=&quot;{{ .Get &quot;src&quot; }}&quot; {{ if or (.Get &quot;alt&quot;) (.Get &quot;caption&quot;) }}alt=&quot;{{ with .Get &quot;alt&quot;}}{{.}}{{else}}{{ .Get &quot;caption&quot; }}{{ end }}&quot;{{ end }} /&gt;
    {{ if .Get &quot;link&quot;}}&lt;/a&gt;{{ end }}
    {{ if or (or (.Get &quot;title&quot;) (.Get &quot;caption&quot;)) (.Get &quot;attr&quot;)}}
    &lt;figcaption&gt;{{ if isset .Params &quot;title&quot; }}
        {{ .Get &quot;title&quot; }}{{ end }}
        {{ if or (.Get &quot;caption&quot;) (.Get &quot;attr&quot;)}}&lt;p&gt;
        {{ .Get &quot;caption&quot; }}
        {{ with .Get &quot;attrlink&quot;}}&lt;a href=&quot;{{.}}&quot;&gt; {{ end }}
            {{ .Get &quot;attr&quot; }}
        {{ if .Get &quot;attrlink&quot;}}&lt;/a&gt; {{ end }}
        &lt;/p&gt; {{ end }}
    &lt;/figcaption&gt;
    {{ end }}
&lt;/figure&gt;
&lt;!-- image --&gt;
</code></pre>
<h3 id="usage">Usage</h3>
<p>I simply changed:</p>
<pre><code>{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg &quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were &quot;having fun&quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&quot; -&gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}
</code></pre>
<p>to this (this example uses a slightly extended version named <code>fig</code>, different than the built-in <code>figure</code>):</p>
<pre><code>{{% fig class=&quot;full&quot; src=&quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&quot; title=&quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&quot; link=&quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/&quot; %}}
</code></pre>
<p>As a bonus, the shortcode named parameters are, arguably, more readable.</p>
<h2 id="finishing-touches">Finishing touches</h2>
<h3 id="fix-content">Fix content</h3>
<p>Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that <code>hugo server --watch</code> is your friend. Test your changes and fix errors as needed.</p>
<h3 id="clean-up">Clean up</h3>
<p>You&rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn&rsquo;t used, delete it.</p>
<h2 id="a-practical-example-in-a-diff">A practical example in a diff</h2>
<p><a href="http://heyitsalex.net/">Hey, it&rsquo;s Alex</a> was migrated in less than a <em>father-with-kids day</em> from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this <a href="https://github.com/alexandre-normand/alexandre-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b81495423294208cc74d610">diff</a>.</p>
]]></content>
		</item>
		
	</channel>
</rss>
